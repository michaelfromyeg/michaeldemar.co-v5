{
  "posts": [
    {
      "createdDate": "2024-12-24T22:43:00.000Z",
      "description": "A practical guide for aspiring computer scientists, emphasizing hands-on learning through projects and community engagement.",
      "editedDate": "2024-12-30T19:45:00.000Z",
      "id": "166c4188-fa0e-80e2-830b-d87d99d95caf",
      "publishedDate": "2024-12-30T11:24:00.000-07:00",
      "slug": "so-you-want-to-be-a-computer-scientist",
      "status": "Published",
      "tags": [
        "Guides",
        "Technical"
      ],
      "title": "So you want to be a computer scientist?",
      "coverImage": "/blog-files/so-you-want-to-be-a-computer-scientist/cover-photo-1681171575028-16aa7a6f063e.webp",
      "content": "If I got hit by a bus and forgot everything I knew about computer science [1], here is how‚Äôd I re-learn it [2].\n\n_Inspired by Robert Heaton‚Äôs ‚ÄúProjects for Advanced Beginners‚Äù (_[_link_](https://robertheaton.com/2018/12/08/programming-projects-for-advanced-beginners/)_) and a bunch of random knowledge I‚Äôve accumulated over time._\n\n> ‚ÄºÔ∏è Are you already someone with knowledge in the field of computer science, and looking for resources or opportunities? I encourage you to look at [Untitled](https://www.notion.so/12cc4188fa0e80808d8af63672a59269) instead. This is my curated list of every-resource-ever I considered in undergrad, and has suggestions for wannabe engineers, PMs, VCs, etc.\n\nLet‚Äôs get to it.\n\nFirst: the number one thing to understand is **‚Äòcoding‚Äô is something you learn by doing.** There is a lot of theoretical stuff to know (‚Äîwhose importance varies with your goals), but fundamentally you need to code. A lot.\n\nSo, let‚Äôs ‚Äúlearn by doing.‚Äù To give that some structure, your curriculum will come as a curated list of projects. This will be supplemented by things to read or look at when you get board. And then some philosophical advice how to have your projects be more than a tree that falls in the forest.\n\nFirst, some principles.\n\n\n## Principles\n\n\n1. Digital assistants (Claude, ChatGPT) are good, but you can only use them like a university TA. That is, they cannot write code for you, you cannot copy text from them, etc., but you can (and should) ask them explanatory questions.\n\n\t‚úÖ ‚ÄúWhat does this bit of code do?‚Äù ‚ÄúAny hints for what‚Äôs wrong with my approach to this problem? DO NOT OUTPUT THE ANSWER. (problem) (approach)‚Äù\n\n\t‚õî ‚ÄúWrite a webpage skeleton for me,‚Äù ‚Äúoutput a function to reverse a linked list in Python‚Äù\n\t\n\tYou should use digital assistants (‚Ä¶you have a literal TA available at your disposal 24/7), but you must use them correctly. Discipline is key!\n\n2. You also must disable any code ‚Äúcomplete‚Äù tools (i.e., anything that writes code for you in a text editor).\n\n\tImagine learning to bike but never being able to take off the training wheels. Would you ever be able to do cool shit, like a wheelie?\n\n\tFor example, if you use Visual Studio Code, add this in your editor.\n\n\t```javascript\n\t// at .vscode/settings.json\n\t{\n\t  // ...\n\t  \"github.copilot.enable\": {\n\t    \"*\": false\n\t  }\n\t}\n\t```\n\n3. You journey must be in public. Once you finish a project, deploy it to a URL, post it on LinkedIn, Twitter, etc., send it to your friends, your mom, your dog, etc. Get people to use it, give you feedback, and fix their bugs. (This will pay off dividends down the line.)\n\nNeed a community of people to do this with? Look at [Summer of Shipping](https://summerofshipping.com/), various sub-reddits (e.g., r/dailyprogrammer), or Discord communities.\n4. Have fun!\n\n\n## Curriculum\n\n\nYour first task will be to build a website. Not using like, Framer, or Bubble, or even Notion, but with HTML (‚ÄùHyperText Markup Language‚Äù for page structure and content) and CSS (‚ÄùCascading Style Sheets‚Äù, for style).\n\nWhy a website? This will serve as your digital playground. You‚Äôll build it, then re-build it, then re-build it again, and again, and again. Each iteration will represent a new milestone in your learning. Each feature will be a test of your knowledge.\n\n‚ÄúBut Michael,‚Äù you say, ‚ÄúI have no interest in being a web programmer!‚Äù Good. You still need a website for sharing your work. And basically every project you make can (and should) be hosted or have an entrypoint on your website. (Think a ‚Äúdownload‚Äù link for your desktop app, or a landing page for your mobile game.) In addition, a lot of frameworks support cross-platform development today, so you might be able to accidentally be good at web programming. Which is also good.\n\nHere are some resources you can use to get you unstuck.\n\n\n- [Khan Academy](https://www.khanacademy.org/) (very basic, just to get you started‚Äîwatch a few videos, they have a nice online playground)\n- [MDN‚Äôs web docs](https://developer.mozilla.org/en-US/docs/Learn_web_development) ‚Üê this is the one you‚Äôll actually use to make your site. Read everything on here like a sponge. Do ‚Äú[Your first website](https://developer.mozilla.org/en-US/docs/Learn_web_development/Getting_started/Your_first_website).‚Äù\n\n- [Frontend Masters](https://frontendmasters.com/) (more advanced, as you start to want to do fancier things with your site)\n\nIf you finish your website, I know you‚Äôre serious. Exciting! Go to [GitHub.com](https://github.com/) and make an account. Create a ‚Äúrepository‚Äù and upload your code there.\n\nStill a student? Skim through [these resources](https://education.github.com/pack) and see if anything looks interesting. (For example, you can get 6 months free to [Frontend Masters](/166c4188fa0e80e2830bd87d99d95caf#167c4188fa0e804b9369d8262f19dbfe)!)\n\n\n---\n\nNext, I‚Äôm going to hijack your social media feeds. Subscribe to all these people.\n\n\n- [The Coding Train](https://www.youtube.com/@TheCodingTrain), 11/10 programming tutorials‚Äîsort by popular\n- [Fireship](https://www.youtube.com/@Fireship), light educational content and tech culture\n\n- [Computerphile](https://www.youtube.com/@Computerphile), fun, advanced content\n- [3Blue1Brown](https://www.youtube.com/@3blue1brown), math and computer science\n\n- (‚Ä¶more to come as I think of them‚Ä¶)\n\nThis is a very passive way to supplement your learning. Hijacking my social media (with gym bros instead of computer scientists) helped a surprising amount when I started going to the gym.\n\n\n---\n\nOK, next, you‚Äôre going to work through some practice problems to learn a language a bit harder than HTML and CSS. (Practice?!)\n\n[Timeless clip.](https://www.youtube.com/watch?v=eGDBR2L5kzI)\n\nYour choices are **JavaScript** or **Python.**\n\n![Other languages are good too‚Ä¶ but later. Credit: me.](/blog-files/so-you-want-to-be-a-computer-scientist/014-image.webp)\n\n\n- [~~Practice-It~~](https://practiceit.cs.washington.edu/) ‚Üí [CodeStepByStep](https://codestepbystep.com/) (do this first)\n\t- (I‚Äôm working on getting an instructor code. Once I do that I‚Äôll add it here.)\n\t- For now, [CodingBat](https://codingbat.com/python) is a good beginner introduction. Then look at Codeacademy‚Äôs courses.\n\n- [Advent of Code](https://adventofcode.com/) (do this every Christmas; work through as many days as you can)\n- [Grind 75](https://www.techinterviewhandbook.org/grind75/) (once you need a job, becomes especially relevant)\n\nPick a few problems a day, as many as you can muster. They‚Äôll be boring at first, but quickly get interesting. This will help ease you into language ‚Äúsyntax‚Äù (i.e., how to ‚Äòspeak‚Äô it).\n\nConsistent practice is key! Even a minute can be enough, just to give you continual exposure.\n\n![Forgive the corny meme, but it‚Äôs true. Credit: LinkedIn.](/blog-files/so-you-want-to-be-a-computer-scientist/020-62e58670-00f8-41e5-812b-65566013b8a5.webp)\n\nThis learn-by-doing approach sometimes hits a roadblock. Here are some resources for either language to help aid your learning.\n\n\n**JavaScript**\n\n\n- [Eloquent JavaScript](https://eloquentjavascript.net/)\n- [You Don't Know JS](https://kbpsystem777.github.io/You-Dont-Know-JS/)\n\n\n**Python**\n\n\n- [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/)\n- [Corey Schafer's YouTube channel](https://www.youtube.com/@coreyms)\n\nHere‚Äôs a kind-of checklist to note down your progress.\n\n\n- [ ] Run a program, output to the screen (`print`, `console.log`)\n- [ ] Store information in variables (`x = 5`)\n\n- [ ] Do basic math\n- [ ] Work with text (‚Äùstrings‚Äù), do basic operations over strings\n\n- [ ] Write logic with if-(this-else-that)-statements (some people call this ‚Äúcontrol flow‚Äù)\n- [ ] Use lists to store multiple items (`[‚Äùhello‚Äù, ‚Äúworld‚Äù]`)\n\n- [ ] Write logic with loops (each `for <N times>: print(\"hello\")`)\n- [ ] Create functions to organize and name your code\n\n- [ ] Read and write to files (text files, CSV files‚Äîi.e., a spreadsheet)\n- [ ] Get input from users\n\n- [ ] Handle basic errors; learn what an ‚Äúexception‚Äù is\n- [ ] Install a use packages from the üåê internet üåê\n\n- [ ] Organize your code into multiple files\n\nOkay, enough reading (talk about boring). It‚Äôs time to get back on the project train.\n\n\n## Projects\n\n\nHere is a list of projects. Some advice:\n\n\n- Make these projects your _own;_ I‚Äôve intentionally left them rather underspecified, so use your creative freedom. Have fun!\n- Every time you finish: (1) make sure it‚Äôs on GitHub, (2) deploy it to a URL, and (3) share that URL everywhere you can think of.\n\t- As a bonus, if you know someone who‚Äôs ‚Äúnice with computers‚Äù‚Äîhave them review your code and give you feedback.\n\n- Don‚Äôt spend too long on any of these.\n- (Also another bonus tip: it‚Äôs okay to implement a kind-of dumb feature if it lets you practice a code coding language feature you learned. It‚Äôs about practice.)\n\nIf any of these bore you, skip ‚Äòem. Again, it‚Äôs about _your_ learning. (I think they‚Äôre fun though.)\n\n\n### Hangman\n\n\nImplement the game of Hangman using your language of choice. The way it should play is‚Ä¶\n\n1. Press ‚Äústart‚Äù\n2. Have an input to either guess a letter, or guess the entire word\n\t1. If the player guesses a letter, either\n\t\t1. Mark off where that letter is\n\t\t2. Or add a body part\n\t2. If the player guesses a word, either\n\t\t1. They won!\n\t\t2. They lost :(\n3. Repeat (2) until they either win, lose, or finish the body parts\n\nThe generate text output, you can Google for Hangman ‚ÄúASCII‚Äù art.\n\nAs an extension: make a mode for two players, where one player can choose a word and mark off the appropriate letter positions.\n\n![Hangman, mid-game. Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/025-Hangman_example.svg.webp)\n\n\n### Conway‚Äôs Game of Life\n\n\nIt‚Äôs not really much of a game, more like an art piece. Here‚Äôs the description.\n\n> The Game of Life, also known as Conway's Game of Life or simply Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input.\n\nYou start with a 2D grid of squares, either filled or empty. You determine the next game state via the following rules.\n\n```text\n1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n2. Any live cell with two or three live neighbours lives on to the next generation.\n3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n```\n\nYour game will consist of code to render the grid, and code to determine the next grid state.\n\nAs an extension exercise, try figuring out interesting starting positions for yourself!\n\n![Is this life? Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/026-Gospers_glider_gun.webp)\n\n\n### Tic-Tac-Toe\n\n\nNow that you have some experience with more interesting game states, let‚Äôs try tic-tac-toe.\n\nThe game should support keeping track who‚Äôs winning (player 1, or player 2) after multiple rounds. It‚Äôd also be cool to be able to track the game‚Äôs history, and jump back in time (‚Äúundo‚Äù).\n\n![Tic-tac-toe. Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/027-Tic_tac_toe.svg.webp)\n\n\n### Snake\n\n\nLast but not least: snake!\n\nImplement the classic game in your terminal. Make sure the user dies if they hit themselves, or hit the wall. \n\nAs an extension: implement a Tron version with two playable snakes.\n\n![Snake! Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/028-Snake_can_be_completed.webp)\n\n\n---\n\nüõë STOP! üõë We must take a non-coding interlude. This is the point at which you can create a very basic resume, that lists out the few projects you have here. But you‚Äôre not allowed to do it in Word! Oh no‚Äîwe use much more annoying tools in this discipline.\n\nGo to a website called [Overleaf](/166c4188fa0e80e2830bd87d99d95caf). Google ‚ÄúOverleaf latex resume templates‚Äù and scroll through to you find one that (a) you like and (b) meets these strict requirements:\n\n1. Single column.\n2. Has the following sections: experience (or equivalent), education (or equivalent), projects (or equivalent).\n3. Does not have: a profile photo, an ‚Äúabout‚Äù or ‚Äúobjective‚Äù section.\n\nThen, edit the template to match your content. LaTeX (the language you‚Äôre now looking at, after forking the template), is a bit trickier than HTML, but a similar kind of mark-up language. I‚Äôll make an exception to my [Principles](/166c4188fa0e80e2830bd87d99d95caf) for a brief moment: you can get ChatGPT (or equivalent) to help you as much as you like with this one. LaTeX is not something you‚Äôll need on a job, but is good for writing very nice docs (and just is something you should know).\n\n\n---\n\nAlright.. back to some ‚ú® more advanced ‚ú® projects.\n\n\n### Digital Analog Clock\n\n\nFor this one, you‚Äôre going to make a analog clock, by digital means.\n\nYour end picture is going to look something like this.\n\n![A analog clock program. Credit: the Processing website.](/blog-files/so-you-want-to-be-a-computer-scientist/029-image.webp)\n\n(‚Ä¶with the hands actually moving.)\n\nTo do it with JavaScript, I recommend using Processing.js.\n\nTo do with Python, I recommend using Pygame.\n\nYou can compute a lot of stuff manually, but this is a first example of where a little bit of math will go a _long_ way to simplifying your code. Time to pull out that high school trigonometry knowledge!\n\n\n### Blog\n\n\nIt‚Äôs been a while since we‚Äôve taken a look at your website. Your next project will be to add a blog! It‚Äôs okay if you don‚Äôt write (‚Ä¶but you should!); this is just a good way to extend your web development skills.\n\nTo make the blog, create a folder on your website that has a series of Markdown files. Markdown is sort-of like a stripped down HTML, useful for writing documents. Your website should take those files and ‚Äòturn them‚Äô into a series of web pages‚Äîthis technique is usually called ‚Äòstatic site generation‚Äô (_static_ because it happens at build time; not dynamic since you can‚Äôt update the blog post in real-time).\n\nYou'll almost certainly need JavaScript to do this, though there are options for Python (look-up Pelican). For JavaScript, you have many options: considering learning React.js (and it's ‚Äúcousin‚Äù Next.js).\n\nYou can also choose frameworks in other languages, like Hugo (which uses Go). Your options are plentiful here! Feel free to do some exploring yourself. (It's your website!)\n\nAs an extension: try hosting other kinds of content from your website (e.g., a photography portfolio).\n\n\n### AI-Kinator\n\n\nAI is all the rage now. But did you know using ChatGPT via code is as easy as this?\n\n```python\nimport openai\n\nopenai.api_key = 'your-api-key-here'\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[{\"role\": \"user\", \"content\": \"What is the capital of France?\"}]\n)\nprint(response.choices[0].message.content)\n```\n\nAn API key should always be kept private. It is your secret key for accessing a (usually) paid or private service. \n\nGo get one for ChatGPT from [here](https://platform.openai.com/). Add a tiny bit of money to your account (I think $5 is the minimum).\n\nNow we‚Äôre going to re-make our own version of the [Akinator](https://en.akinator.com/). Except for yours, you‚Äôll use ChatGPT as the all knowing Ak. You‚Äôll have to do quite a bit of Googling to figure out how to use the API effectively, but the core idea is quite simple. Prompt is to ask you questions to guess the person you‚Äôre thinking of, in a loop up to 20 guesses.\n\n\n### Text Omegle\n\n\nOmegle was a video chat mired in controversy. It got shut down recently by its creator.\n\nYour final project will be to make a non-video version! The app should work as follows:\n\n\n- A welcome screen where users can put in a keyword\n- If someone else has put in the same keyword, they‚Äôre placed in a room\n\n- They can chat, until either user disconnects\n\nExtension work can include giving either user a bit beefier of a profile (e.g., a profile picture, bio), and smarter matching for non-exact-but-kind-of-matches (e.g., ‚Äúamerican football‚Äù, and ‚Äúfootball‚Äù). \n\n\n---\n\nFinally, here are some fun extensions to take depending on your interests.\n\nInterested in **data science or machine learning?** You may want to beef up your math foundations a bit. Khan Academy, MIT OpenCourseWare, etc., have a ton of machine learning offerings. Kaggle is also a good resource for getting real-world experience.\n\nInterested in **game programming?** Make games! World‚Äôs your oyster here. We‚Äôve mostly done 2D stuff, but you can install Unity and venture in 3D programming. Gamejam‚Äôs are a good way to build your skills quickly.\n\nInterested in **web development?** The ‚Äúclassic‚Äù web dev next project would be a todo list. If you didn‚Äôt already, learn some JavaScript and then tack on a framework like React. [React‚Äôs tutorial](https://react.dev/) is a great starting place. You should also get Frontend Masters. \n\n\n---\n\nAt this point, if you‚Äôve really stuck to the plan, you‚Äôre ready to move on from this guide. Here are some resources to continue along your journey.\n\n\n- [roadmap.sh](https://roadmap.sh/), a collection of developer roadmaps (i.e., career path ‚Üî learning track)‚Äîvery helpful!\n- Learn math ‚Üí Khan Academy, Numberphile, 3Blue1Brown, MIT OpenCourseWare‚Äôs stuff, Aelph‚Äôs guide (to get advanced)\n\n- Learn computer science theory ‚Üí Computerphile, 3Blue1Brown, MIT OpenCourseWare‚Äôs stuff (to build up a make shift degree)\n- Get a job ‚Üí [Untitled](https://www.notion.so/12cc4188fa0e80808d8af63672a59269), the other doc of mine that I send people a lot, which is a compilation of resources for levelling up in industry\n\n\n**Remember: the only way to get better is to keep programming.**\n\nThanks for reading! Find this valuable? Hate this guide? Have a funny joke you‚Äôd like to tell me? Feel free to drop a line at michaelfromyeg [at] gmail [dot] com.\n\n\n## Footnotes\n\n\n[1] Doesn‚Äôt that sound nice.\n\n[2] Oh god."
    },
    {
      "createdDate": "2024-12-27T23:56:00.000Z",
      "description": "A comprehensive and accessible guide to using Makefiles for efficient program compilation and management, tailored for students and developers alike.",
      "editedDate": "2024-12-30T18:23:00.000Z",
      "id": "169c4188-fa0e-8003-a494-dace58eb9112",
      "publishedDate": "2024-12-28T18:58:00.000-07:00",
      "slug": "makefiles",
      "status": "Published",
      "tags": [
        "Guides",
        "Technical"
      ],
      "title": "Makefiles",
      "coverImage": "/blog-files/makefiles/cover-gnu-make.webp",
      "content": "A brief guide to GNU's `make`. ~~Check it out~~ [~~here~~](https://michaelfromyeg.github.io/makefiles)~~!~~ It‚Äôs since been migrated here!\n\n![The goat.](/blog-files/makefiles/001-gnu-make.webp)\n\nI used to use `make` often in small-to-medium sized code snippets in CPSC 213 (\"Introduction to Computer Systems\") at UBC as a part of the teaching team. Hopefully this guide can serve students well and provide some clarity on this somewhat arcane build tool!\n\n\n# Makefiles üêê\n\n\nA guide to Makefiles. Designed to be useful for students I taught at the University of British Columbia (UBC), but also hopefully more broadly applicable to other developers. (I've read a lot of Makefile tutorials, and most of them are a bit confusing. So, hopefully this rendition is a bit clearly for undergraduates.) The content here is mostly just a more accessible version of [Chapter 2 of the ](https://www.gnu.org/software/make/manual/make.html#toc-An-Introduction-to-Makefiles)[`make`](https://www.gnu.org/software/make/manual/make.html#toc-An-Introduction-to-Makefiles)[ manual](https://www.gnu.org/software/make/manual/make.html#toc-An-Introduction-to-Makefiles), \"An Introduction to Makefiles,\" with some extra tidbits here and there.\n\nNow, without further ado,\n\n\n## Motivations\n\n\n`make` is a command line program that, in tandem with a `Makefile`, allows one to 'compile' and 'link' small, medium, and large programs. If you've ever compiled a program, like\n\n`gcc main.c -o main; ./main`\n\nor perhaps\n\n`javac Main.java; java -cp . Main`\n\nor even\n\n`clang++ main.cpp -o main; ./main`\n\nyou'll benefit from `make`. `make` can be used to add \"shortcuts\" for various common commands as well, such as cleaning up undesired files from your project. It also _only recompiles what is necessary_ which, while never particularly relevant for assignments consisting of less than 1,000 lines of code, becomes extraordinarily relevant in codebases of 1,000,000+ lines.\n\n\n## Makefile Basics\n\n\nFirstly, make sure you have `make` actually installed. Note this is not the same thing as `cmake`. (I'm not proud to admit it, but I thought these were equivalents for a very long time.) You should also have `gcc` working (and ideally some kind of Java installed). Again, new-to-C Windows users might have issues here; I recommend using [Chocolatey](https://chocolatey.org/) to fix those issues (or better yet, WSL).\n\n> Aside: cmake is a meta-make (that is, like make for make). It builds makefiles for various systems simultaneously. It has 'profiles' for different compilers and systems, and will automatically generate the correct flags, et cetera, on the fly. In short, it's for huge projects, and I won't be covering it in this guide.\n\nTo check if you have `make` installed, run `make --version`. I see `GNU Make 4.2.1 [...]` on my machine. If you see an error like,\n\n> \"'make' is not recognized as an internal or external command, operable program or batch file\" (from PowerShell, on Windows.)\n\nor\n\n> \"make\": command not found (from Linux, I believe.)\n\nyou need to install the software. Follow [these](https://www.gnu.org/software/make/) steps; on Windows, `choco` is your friend here.\n\nTry running `make` with no arguments. You should see the following.\n\n```text\n$ make\n> make: *** No targets specified and no makefile found.  Stop.\n```\n\n`make` is looking for a corresponding `Makefile` and didn't find one. Let's start by creating one!\n\nMakefiles are essential a set of different commands or \"rules.\" They have **no** file extension, and are just written in plaintext. Each rule has roughly the following structure.\n\n```text\ntarget ...: prerequisites ...\n    recipe\n    ...\n```\n\nThe **target** is the name of the file generated by the program. A **prerequisite** is dependency for the target, which should be another target itself. The **recipe** is the actual set of actions carried out. The target and recipe are required, but prerequisites are of course optional.\n\n\n**WARNING**: Makefiles are picky about spacing, like Python. Each line in a recipe must be prefixed by a `TAB` character. Four spaces don't work; it really needs to be tabs. Just a note.\n\nLet's go back to the basic `gcc main.c -o main` we all know and love. If you check out `examples/basic`, we can see what this looks like in a Makefile. Begin by trying\n\n```text\n$ gcc main.c -o main; ./main\n> H3llo, w0rld!\n```\n\nwhich works as normal. Now run\n\n```text\n$ make; ./main\n> H3llo, w0rld!\n```\n\nour first Makefile! And it's really just one line:\n\n```text\nmain: main.c\n```\n\nkind-of cool isn't it? Though it's a bit unorthodox, we could even do this for a Java file. Running the `examples/java` file in VS Code gave some horrible command like\n\n```text\n$ /usr/bin/env /home/mdema/.sdkman/candidates/java/current/bin/java \\\\\n    --enable-preview \\\\\n    -XX:+ShowCodeDetailsInExceptionMessages \\\\\n    -Dfile.encoding=UTF-8 \\\\\n    -cp /home/mdema/.vscode-server/data/[...]/bin \\\\\n    examples.java.Main\n> Hello, world\n```\n\nImagine trying to memorize that! Instead, try\n\n```text\n$ make\n> Hello, world!\n```\n\n(Forgive the `cd`s in the Makefile; this is just for demonstration.) Clearly, `make` _can_ be used to run any set of commands. Rules are at their core, just a set of instructions, a \"recipe\", that are just commands you would've had to run by hand in the shell.\n\n\n## More on Makefiles\n\n\nOftentimes, our programs are not just single files. What if we want to compile a bunch of `.c` files and `.h` files into a single executable? This is where object files (`.o`) can truly benefit us. We can create rules to construct intermediate `.o` files, and then create a \"master\" rule that combines (or better yet, links) a bunch of these object files together.\n\nIn sum, the template is something like this\n\n```text\nmain: something.o something_else.o something_else_other.o\n    gcc -o main something.o \\\\\n      something_else.o \\\\\n      something_else_other.o\n\nsomething.o: something.c something.h defs.h\n    gcc -c something.c\n\nsomething_else.o: something_else.c defs.h\n    gcc -c something_else.c\n\nsomething_else_other.o: something_else_other.c constants.h defs.h\n    gcc -c something_else_other.c\n```\n\nTo create `main`, you would type `make` (or `make main`). Notice how `main` is just that, and not suffixed with a `.o`. We also use `-o` instead of `-c` to create an object file instead of an object file. This example nicely demonstrates the importance of prerequisites; if we edit `constants.h`, recompiling main will only recompile `something_else_other.o` before linkage, saving some computation time.\n\nThe first rule given is used by default, so it should be the \"main\" goal or executable produced by your program.\n\n> A few asides from the above example. Firstly, note that make itself is not picky about what goes in a recipe, and it's your task as the programmer to devise a recipe that really works. Second, gcc is the GNU C compiler; you can see a brief guide to different compilers here. cc is a more generally applicable option.\n\nIt can be a bit tedious re-writing all these file names. Instead, it's common practice to throw them into a variable. The above example becomes.\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\n\n# etc.\n\n```\n\nYou'll also notice that we're manually stating `gcc -o main ...` in each of these, but we did not do that in our basic example. In fact, `make` has an implicit rule to use `cc -c` to compile object files from `.c` files. It's pretty nifty. Likewise, `make` also allows us to skip adding the `.c` file itself to its object file prerequisite. The above example simplifies to\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\nsomething.o: something.h defs.h\nsomething_else.o: defs.h\nsomething_else_other.o: constants.h defs.h\n```\n\nNotice how `defs.h` is a pre-requisite to all of our object files? There's more room for improvement here. We can group entries by their pre-requisites instead. This yields\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\n$(OBJECTS): defs.h\nsomething.o: something.h\nsomething_else_other.o: constants.h\n```\n\nLast thing before we wrap up‚Äîrunning these commands will leave a lot of unwanted files hanging around. To fix this, let's add a \"phony\" command called `clean` that will delete junk files. The reason it is called \"phony\" is that we don't have a file `clean.c`, but rather we're looking to just automate some command line task.\n\nWe get\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\n$(OBJECTS): defs.h\nsomething.o: something.h\nsomething_else_other.o: constants.h\n\n.PHONY: clean\n\nclean:\n    rm main $(OBJECTS)\n```\n\n\n## Fancy Makefiles\n\n\nWhat if we want to add some command line options to our `gcc` call? For example, running `gcc main.c -std=gnu11 -Wall -o main`? To do this, we just parameterize the `gcc` part of a recipe. Continuing our earlier example,\n\n```text\nCC = gcc\nCFLAGS = -I . -std=gnu11 -Wall\n\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    $(CC) -o main $(OBJECTS)\n\n\n# etc\n\n```\n\nNotice that we must specify the `$(CC)` and the `CFLAGS` is added automatically by the compiler.\n\nRemember the earlier example where we wanted to pull out `defs.h` from each of our pre-requisites? There's a different, arguably better way of doing this that involves using macros. We can also create \"generic\" rules that apply to globs (e.g., all `*.c` files). This example demonstrates this\n\n```text\nCC = gcc\nCFLAGS = -I . -std=gnu11 -Wall\n\nOBJECTS = something.o something_else.o something_else_other.o\nDEPS = defs.h\n\n%.o: %.c $(DEPS)\n    $(CC) -c $(CFLAGS)\n\nmain: $(OBJECTS)\n    $(CC) -o main $(OBJECTS)\n\n\n# etc.\n\n```\n\nThis fancy `%.o` rule says all object files depend on their respective `.c` file along with all of the `DEPS`.\n\nFor a final step, let's add directories. What if our `.h` files are in an `include/` directory, our source code lives in a `src/` folder, we have local libraries in a `lib/` folder, and we want to stuff our object files into an output directory. Here's what that would look like.\n\n```text\nIDIR = ../include\nODIR = obj\nLDIR = ../lib\n\nCC = gcc\nCFLAGS = -I $(IDIR) -std=gnu11 -Wall\n\nLIBS = -lm\n\n_DEPS = main.h\nDEPS = $(patsubst %, $(IDIR)/%, $(_DEPS))\n\n_OBJ = main.o other.o\nOBJ = $(patsubst %, $(ODIR)/%, $(_OBJ))\n\n$(ODIR)/%.o: %.c $(DEPS)\n    $(CC) -c -o $@ $< $(CFLAGS)\n\nmain: $(OBJ)\n    $(CC) -o $@ $^ $(CFLAGS) $(LIBS)\n\n.PHONY: clean\n\nclean: # core is for core dumps!\n    rm -f $(ODIR)/*.o *~ core $(IDIR)/*~\n```\n\nThere are a few extra oddities in this snippet. There are a few [automatic variables](https://www.gnu.org/software/make/manual/make.html#Automatic-Variables) being used. `$@` is the name specified on the left of the colon. `$<` is the first item in the dependencies list. `$^` is the names of all of the pre-requisites.\n\n`patsubst` is a helper function to replace words matching a specified pattern with some text. \"%\" acts as a wildcard character.\n\nWith the above information and the knowledge in the rest of this guide, try to break down what happens above for yourself as an exercise!\n\nThis file comes courtesy of [Bruce Maxwell of Colby College](https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/). If you try to re-use it, you may need to tweak the file paths a bit!\n\nThat's all for this Makefiles guide. Hope you enjoyed!\n\n\n## Glossary\n\n\n\n- **compile**, meaning to transform source code into object files (e.g. running `gcc main.c`)\n- **executable file**, a file that when run causes a computer to perform a set of instructions (e.g., the `main` in `gcc main.c -o main`)\n\n- **link**, meaning to transform many object files (i.e., the things made in compilation) into a single executable file\n- **machine code**, a (super) low-level programming language that controls a CPU\n\n- **object files**, a file that contain object code, which is machine code that is output from a compiler or assembler (e.g., our `.o` files); they cannot be run in the command line\n\n\n## Further Reading\n\n\n\n- [GNU Make Homepage](https://www.gnu.org/software/make/)\n- [A Simple Makefile Tutorial](https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/)\n\n- [isaacs/Makefile](https://gist.github.com/isaacs/62a2d1825d04437c6f08)\n- [makefiletutorial.com](https://makefiletutorial.com/)\n\n- [Using make and writing Makefiles](https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html)\n- [Tutorial on writing makefiles](https://www.math.colostate.edu/~yzhou/computer/writemakefile.html)\n\n- [GNU ](https://www.gnu.org/software/make/manual/make.html)[`make`](https://www.gnu.org/software/make/manual/make.html)"
    },
    {
      "createdDate": "2024-11-17T22:39:00.000Z",
      "description": "A decade of scrapbooking has taught me invaluable lessons about preserving memories and reflecting on life's journey through creative cataloging.",
      "editedDate": "2024-12-27T06:48:00.000Z",
      "id": "141c4188-fa0e-8082-b413-ed132c1dd339",
      "publishedDate": "2024-11-17",
      "slug": "a-decade-of-scrap-booking",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "A decade of scrap booking",
      "coverImage": "/blog-files/a-decade-of-scrap-booking/cover-scrapbooks.webp",
      "content": "In my first year of high school, I had the luxury of spending an all-inclusive weekend in Lacombe, Alberta. In case you‚Äôre not familiar, Lacombe is a city in central Alberta, 125 kilometers south of Edmonton and home of the Len Thompson Manufacturing Plant (that part, of course, you already knew). In 2017, it was home to the Alberta Student Leadership Conference. The website is still up, [here](https://connectedleaders.weebly.com/).\n\n![A poster from the conference. 800 student leaders!](/blog-files/a-decade-of-scrap-booking/001-image.webp)\n\nI went, starry eyed, to learn how to lead. And learn I did! (My whole leadership experience in high school would be a blog post on its own.) I attended countless workshops, keynotes, and lunches. And what did I get at each of them? (Besides, you know, leadership skills.) Paper. In some form or another: pamphlets, brochures, photos, postcards, name tags, bookmarks. You name it, I got one.\n\nComing home, I was faced with a serious dilemma. How was I going to possibly save all of this essential learning material? My printed-out-Polaroids? Or further still, my conference badge?! My mother (as always) had the solution. \n\nThe Hilroy Studio¬Æ Scrap Book.\n\n![The scrap book, in all its glory.](/blog-files/a-decade-of-scrap-booking/002-big_HLR26411.webp)\n\nThis series of twenty manila pages, coil-bound and enveloped in a firm blue cover has served as the springboard for a decade of creative cataloging. My now fourteen-book long series is a living memoir that has served as a window into my past (translated into two-dimensional form). A collection featuring romantic letters and nasty break-ups, acceptance letters and untimely rejections, postcards from around the planet and receipts from my local liquor store. It‚Äôs got everything.\n\nAfter occupying a corner of my bedroom for the past year, I recently sent them home to Edmonton (as I moved to San Francisco, to begin New Grad Life). I packed them up and shipped them off to the Great White North. However, while on a mini graduation trip in Tofino, British Columbia, my mom remarked that while one of the two boxes I sent home had arrived, the other was nowhere to be found. And of course, the missing box was the one with the scrapbooks.\n\nFor a short time, I was devastated. An entire decade of hand-picked, cherished collectibles had ostensibly been whisked away. Up until that point, I had never bothered to reflect on how much the cathartic cutting-and-pasting meant to me. It was just a sort-of offbeat hobby, a way to make sense of all the random Things that showed up in my pockets in my day-to-day life.\n\nThankfully, the scrapbooks did turn up only a handful of days later. The near-miss pushed me to think about how much this hobby had taught me about myself. And now, on the roughly ten year anniversary of the hobby, it‚Äôs time to finally share those reflections, and some of my favourite pages from along the way.\n\nFirst, I should share my Rules of The Scrap. \n\n1. Err on the side of keeping it\n\t1. Leaving a table at a restaurant? Scoop up the receipt. Have some miscellaneous paper in your pockets after a night out? Save it. Dump it all in a bin for later processing. I often find the most insignificant pieces (e.g., a receipt), to serve as the best starting point for a story (e.g., ‚Äúremember how laughably bad the service was?‚Äù).\n2. Make it real, not ‚Äònice‚Äô\n\t1. Let‚Äôs be honest: life is often ugly and occasionally beautiful, and my scrapbook reflects that. ‚ÄòScrap‚Äô means discarded, leftovers‚Äînot fancy gel pens and cursive writing. It‚Äôs not Instagram-ified (i.e., limited to the top 1% of all my best memories), but rather a depiction of my whole self.\n3. The opening is dedicated to travel, and the last to former-selves\n\t1. Travel makes life long and special, so for me it appears first-and-foremost‚Äîboarding passes, bus tickets, luggage tags, and more adorn the opening page.\n\t2. I also _usually_ dedicate the last page to pieces of ID I no longer use, as a kind of goodbye to a phase of life.\n\nExpanding on 3(b), here is, for example, the last page of scrapbook #9, featuring Michael the Singaporean Exchange Student.\n\nFeaturing my ‚ÄòTembusu Privilege Card‚Äô (though after being a guest [there](https://tembusu.nus.edu.sg/), the real privilege was mine), my Cardiflex (which, like any card for a printer, never worked), my bus pass, debit cards from the world‚Äôs most annoying bank, my student ID, and my foreign ID (featuring a rather rough passport photo taken after a nearly 20 hour flight).\n\nAll once mainstays in my wallet, now at rest in scrapbook #9.\n\n![The ID cards of scrapbook #9.](/blog-files/a-decade-of-scrap-booking/004-image.webp)\n\nI‚Äôll amass content over about a one to three month period, and then spend an afternoon sorting the content. I rip out the interesting bits and pieces, and paste them in haphazardly. (Usually I‚Äôll toss on a movie in the background. Since you got here, [you should follow me on Letterboxd](https://letterboxd.com/michaelfromyeg/)!)\n\nFor me, the activity of making the scrap books is as significant as the scrap books themselves. (Forgive me, but I'm going to be a bit philosophical here.) We Humans (‚Äîcapital ‚ÄòH‚Äô) toil away on the ol' Blue Marble. Purpose is something which we actively breathe into life. Those things which I scrap book‚Äîremnants from events, letters from relationships, receipts from dinners, and raffle tickets from the nights out‚Äîare, for me, little microcosms of our Purpose (‚Äîcapital ‚ÄòP‚Äô) here. Life must be lived! Piecing together the scrap books makes me appreciate the insanity and innate wonder of our existence here‚Äîall The Good, The Bad, and The Ugly.\n\nSoapboxing aside‚Äîhere are some of my favorite pages from each, with some stories.\n\n![Scrapbook #12. From my trip to Vietnam, circa April 2023.](/blog-files/a-decade-of-scrap-booking/006-image.webp)\n\n\n**Scrapbook #12**\n\nThe Ha Giang loop is probably some of the best travel you can do today. This is the route I took on the three day trip through north Vietnam.\n\nThe loop is so much more than getting on a motorbike and pressing the gas. It's the mishmash of people, the party, and the drivers themselves.\n\nHell, my driver (Thanh, pronounced 'Tyne,' which, to my amusement, is the real name of one of my other good friends) at just merely 26 years of age had four children. He had an inkling for YouTube trap-house mash-ups, and was astounded that a thing such as a [Big Booty Mix 22](https://www.youtube.com/watch?v=sm3bt4Q39b8) exists.\n\n\n**Scrapbook #1**\n\nThere have been very few times I've written in, or allowed writing in the scrap books. One exception was my last day of high school. These people all mean a lot to me, despite the fact that I've seen a whopping ~4 of them consistently over the past 5 or so years.\n\nLife moves fast; this page is a grounding reminder that the people in your circle can change immediately, without warning. A reminder to call your friends and let them know they‚Äôre loved, however you express that. \n\n(Also, we should take a moment appreciate the absurdity in the top middle of the page, and the purported run for Prime Minister implied by 'Michael DeMarco 2020!!' in the bottom right‚ÄîI'll take the votes.)\n\nOne more here: the 'Sorry Joey did you like that' was from prom. My best friend in high school, Jordan, and I campaigned for Best Bromance. In his best Steve Harvey impression, my friend announced it was uh‚Äîoh‚ÄîI misread the names‚Äîand just like that we lost. Can't win them all!\n\n![Scrapbook #1.](/blog-files/a-decade-of-scrap-booking/008-image.webp)\n\n![Scrapbook #6.](/blog-files/a-decade-of-scrap-booking/009-image.webp)\n\n\n**Scrapbook #6**\n\nMe, as a game of Wordle. If you had to guess where this was used, what would you go for first? Maybe a residence hall event? Perhaps some other club social?\n\nHow about a fraternity party?\n\nTwice annually, I had the privilege of getting to decorate my room in some absurd theme courtesy of Phi Gamma Delta a.k.a. Fiji's 'Small Rooms' function. In the spring of 2021, Wordle was all the rage, and thus my friend Jacob and I Wordle-ified his room. I actually created a custom version of Wordle for our room ('Fijidle'), which eventually got DMCA'd by the New York Times for copyright infringement. [Yeah](https://www.npr.org/2024/03/13/1238142507/cease-desist-new-york-times-wordle-spin-offs).\n\n\n**Scrapbook #14**\n\nLast but not least, I'd be remiss if I didn't give a shout-out to the Coffee News. This is‚Äîseriously‚Äîone of the things I miss most from Alberta. It's a two-page spread featuring four off-the-wall or otherwise 'neat' news stories, quotes, a bit of trivia, Horoscopes, jokes, and a game to search for a drawing of a little man among the ad space.\n\nI guess my mom picked up on how much I enjoy the weekly editions, so has now begun stockpiling them, and mailing them out to wherever I happen to be on a monthly cadence. Thanks, mom.\n\n![Scrapbook #14.](/blog-files/a-decade-of-scrap-booking/011-image.webp)\n\n\n---\n\nThose are just a few cherry-picked highlights, but there's of course much more story to tell. So where do I go from here? \n\nI‚Äôm tinkering with ways for friends to join on the story. I want to create something like a series of [FigJam](https://www.figma.com/figjam/) boards with collaborative \"sticky-noting\" of things that stick out to people. I do need to redact some of the content that‚Äôs a bit _too_ personal, but I think there's a cool, collaborative happy medium here.\n\nIdeas? Questions? Concerns? For the first two, feel free to write me at michaelfromyeg [at] gmail [dot] com; for the third, I'm not quite sure I care, so don't."
    },
    {
      "createdDate": "2024-12-28T00:01:00.000Z",
      "description": "Discover how RapViz uses NLP and modern web technologies to analyze and highlight rhymes in rap lyrics, making it easier to appreciate the artistry behind the words.",
      "editedDate": "2024-12-30T18:24:00.000Z",
      "id": "16ac4188-fa0e-8039-af80-e08e9185783d",
      "publishedDate": "2024-07-06T18:58:00.000-06:00",
      "slug": "rapviz",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "RapViz",
      "coverImage": "/blog-files/rapviz/cover-rapviz-negative-logo.webp",
      "content": "See your bars broken down right in the browser. Powered by Spotify, Genius, and Google Cloud. Check out the GitHub repository [here](https://github.com/michaelfromyeg)!\n\n![rapviz-main.png](/blog-files/rapviz/001-rapviz-main.webp)\n\n![rapviz-mfdoom.png](/blog-files/rapviz/002-rapviz-mfdoom.webp)\n\n\n### Background\n\n\nThere are loads of videos online that inspired this project. Take a look at Genius' version, [Check The Rhyme](https://youtube.com/watch?v=1VNHp_flJKE), or Vox's, [Rapping, deconstructed: The best rhymers of all time](https://youtube.com/watch?v=QWveXdj6oZU). These videos get millions, and I mean millions of hits online. Why? Well, it's fun! And it's cool. The basic concept is that rap lyrics are \"broken down\" and the rhyming groups are highlighted. Often the videos will do this on a syllable-by-syllable basis, but also sometimes do multi-word rhymes! For this project, we wanted to start simple and focus on single, whole word rhymes.\n\nWe thought we could leverage NLP, a couple of freely available APIs, and some basic React so create a website that generates these kinds of \"highlighted\" rhymes. So what happened?\n\n\n### Usage\n\n\nThe user is presented with one of two options. They may either submit their own bars into a text field, or they can sign into Spotify and have their current song's lyrics analyzed. The lyrics are printed out with the rhyme scheme highlighted.\n\n\n### How it's made\n\n\nWe used a Flask backend to write a couple of endpoints to help us LyricsGenius, an API for scraping lyrics from Genius. We also wrote our NLP-based rhyme detection algorithm in Python and processed all of that data on the backend. Spotify authentication and the UI was all handled by React. We eventually deployed our app to Google Cloud so other users could try it.\n\n\n### Challenges\n\n\nDeveloping the rhyme algorithm was really tricky, especially getting it to be fast enough (eventually down to O(n) time!). We also ran into issues integrating Spotify into our app, but eventually got it sorted.\n\n\n### Accomplishments\n\n\nWe are able to programmatically generate what would take a video editor likely a couple of hours to do! Leveraging modern web technologies and NLP, displaying the rhyme scheme of a song proved to be a challenging but very possible feat.\n\n\n### Future\n\n\nCheck out our [issues](https://github.com/michaelfromyeg/RapViz/issues) on GitHub! Though it was built at a hackathon (and there's quite a bit of spaghetti code) this is definitely a project I want to continue developing in the future."
    },
    {
      "createdDate": "2024-12-27T06:25:00.000Z",
      "description": "A series of unfortunate events led to my hilarious and chaotic journey as a not-so-great flying passenger.",
      "editedDate": "2024-12-27T07:16:00.000Z",
      "id": "169c4188-fa0e-801f-bb54-e4c506a127de",
      "publishedDate": "2023-10-29",
      "slug": "im-bad-at-flying",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "I‚Äôm bad at flying",
      "coverImage": "/blog-files/im-bad-at-flying/cover-boarding-passes.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on October 29th, 2023.\n\nStory time. I'm bad at flying.\n\nBut I don't mean the act of flying, as a pilot. I mean as a passenger.\n\nHow can you be bad at packing your bags, going to the airport, filing through security, and hopping on a plane? Great question! I'm not sure, but after reading this, I think you'll be inclined to agree.\n\nRight now, I'm sitting in the Victoria airport after trying to board a short-haul flight to my hometown of Edmonton, having it cancelled and rebooked (instead through a three-way connection from Vancouver-Victoria-Calgary-Edmonton), then _illegally_ boarding my first flight with an expired license, only to get flagged in Victoria. That's right. I'm now stranded in YYJ all because I wanted to watch some Heritage Classic hockey. And for turning 22.\n\n![My four boarding passes, in all their glory.](/blog-files/im-bad-at-flying/000-boarding-passes.webp)\n\nThis morning was hell from start to finish. I woke up with a blistering hangover at the crack of dawn. The past night I'd spent Hall-o-weekend-ing and was now going to head to Edmonton to catch the Heritage Classic. It was the Battle of Alberta, and the first outdoor game in Edmonton in 20+ years. I convinced my whole family to go. I was elated! Upon arriving at the airport, however, I saw my flight was cancelled. I waited in a brutally long line of folks getting other flights sorted (including, but not limited to, some aspirant vacationers pleading to make it to Puerto Vallarta and a few Calgarians who faced a different, but similar cancellation‚Äîin that case, WestJet's probably doing them a favor by keeping them in Vancouver). It was only while waiting in this roughly hour-long line that I began to really feel the effects of running a half-marathon and clubbing the day prior. I was seething in pain, literally clutching one of the hand rails just desperate to take a nap on _some_ plane going somewhere.\n\nI finally got to the front, and the gate agent was friendly and understanding. \"You going to the game?\" I gave him a nod and he gave me one of the most ridiculous itineraries I've ever seen in return. First to Victoria, then to Calgary, _then_ to Edmonton, just in time for the 5pm puck drop. I had 20 minutes to make it to the gate, so I flew through security (with a bit of WestJet-endorsed line-cutting) and made it no problem. I boarded my flight with ease and had a smooth trip. What else could go wrong!\n\nLots. My connection from Victoria to Calgary got delayed, but not so much that I would miss my Edmonton connection. Annoying, but not an ordeal. I paid for a $22 breakfast sandwich, and finally started to fight off the hangover. I went to board the flight around 11am and the gate agent stopped me dead in my tracks. My license is expired?! There's no way! I _just_ **flew** here.\n\nI turned 22 on October 15th, 2023, and indeed, that's the day my license expired. Mind you I had bought alcohol, been to the club, and _boarded an aircraft_ with this identification. If I had had another piece of non-photo identification, I might've been able to board, but my other documents were with my passport at home. Boohoo. Back to Vancouver I go! Sheepishly, I messaged my family and transferred my mom the ticket.\n\nThis is where it gets better. When the gate agent told me I couldn't go, I wasn't that phased. **This isn't the first time my license has gotten me into plane-boarding trouble.**\n\n![Jasper, Alberta, Canada circa January 2021.](/blog-files/im-bad-at-flying/001-jasper.webp)\n\nStory time, again. Back in high school, I didn't get my license. So, during the summer after my freshman year, I did lessons with the Alberta Motor Association and was geared up for the exam. The only problem was the pandemic put a pause on the actual examinations. I had to write it in December, instead, when I was home for winter break.\n\nNo problem, I figured. I took the exam on the second last day of my trip home and passed with ease. I headed into the DMV to process the paperwork, and coincidentally was wearing my UBC hoodie. The DMV agent smartly asked if I'd need my license to fly back to Vancouver. After some discussion, we (that is, myself, the agent, and my mother, a.k.a., _my_ agent) agreed that the temporary one was fine. Why?!? I had no idea! That obviously makes no sense. But we all agreed.\n\nSo, when I got to the airport, I obviously wasn't let on. However, I needed to be back in Vancouver as soon as physically possible. I was scheduled to start my first-ever co-op gig with Samsung. I looked at flights and‚Ä¶ $#!T! Everything was unbelievably expensive or booked out.\n\nI explored all other options. Bussing? No dice. How about‚Ä¶ a train? The VIA Rail economy ticket wasn't too expensive (~$150 if I recall correctly). Done. Booked.\n\nAnd with that, I rode The Canadian from Edmonton to Vancouver in early January. The trip itself was stunning, with unbelievably gorgeous views of the Western Canada in wintertime. It was a bit eerie though, as the crowd on the train looked very no-fly-list-y. One dude in got kicked off in Northern British Columbia for using drugs in the washroom.\n\nThe other train ordeal was a massive blizzard that passed through the interior during the train travel. It knocked down a litany of trees, all over the tracks. This meant we would ride for twenty or thirty minutes, stop, clear the tracks, and go again. In the middle of nowhere! My mom had packed me peanut butter sandwiches for the train trip, and I had to start _rationing_ them. I killed time by trying to write unit tests for APK file extraction (‚Ä¶I was on the Knox team at Samsung). Not the most riveting stuff, I'll confess. Eventually, after nearly a complete **twenty-four-hour** delay, I made it back to Vancouver.\n\nYou would've thought that experience had taught me to carry my godforsaken passport, but evidently my hungover morning self was not exactly envisioning this exact scenario.\n\nFool me once, fool me twice. [And I'll probably make a fool of myself again](https://youtube.com/watch?v=aqGn-1XX7cI)."
    },
    {
      "createdDate": "2024-12-26T22:13:00.000Z",
      "description": "Reflecting on my transformative summer internship experience at Amazon, where I navigated complex projects, embraced new challenges, and learned invaluable lessons.",
      "editedDate": "2024-12-27T07:17:00.000Z",
      "id": "168c4188-fa0e-805c-9a31-d088de638da2",
      "publishedDate": "2022-08-23",
      "slug": "day-one-my-internship-at-amazon",
      "status": "Published",
      "tags": [
        "Blog",
        "Technical"
      ],
      "title": "Day One: My internship at Amazon",
      "coverImage": "/blog-files/day-one-my-internship-at-amazon/cover-amazon-desk.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on August 23rd, 2022.\n\nIt's been about two weeks since I wrapped up my position as a Software Development Engineer (SDE) Intern at Amazon, and I wanted to reflect on my time there this summer. I often get asked about the full end-to-end experience of my time at Amazon, so before I get into what I worked on and what I learned, I'll first do a full re-wind to my initial application.\n\n\n## Working towards a FAANG offer\n\n\nIn recruiting for my third co-op term at UBC, I laid out definitive guidelines for the kind of position I was after. My primary objective was to work at a company solving complex, 'technically engaging' problems, to grow quickly as an early-career engineer. In addition to at-work complexity, I was also very interested in moving to a new city in Canada or the US, to grow personally and get a chance to travel to new places.\n\nI applied to Amazon in early August as soon as their applications opened. (For those of you currently recruiting, this is often an overlooked but highly important factor; big companies often recruit on a \"rolling-basis,\" meaning an early application is critical.) I chose Toronto largely on a whim.\n\n![The e-mail inviting me to interview at Amazon.](/blog-files/day-one-my-internship-at-amazon/000-amazon-interview-invitation.webp)\n\nI then completed two online assessments (OAs). The first was a fairly standard set of technical questions on HackerRank, and the second was a \"work simulation\" to assess behavioural skills asynchronously. I fortunately passed, and then scheduled a final-round 45-minute technical interview. The interview was also fairly standard; it consisted of technical and behavioural questions. Unique to Amazon, the behaviourals are focused on a set of [leadership principles](https://amazon.jobs/en/principles) (LPs) that, I can now attest, are embedded throughout company culture. I'll touch more on the LPs later.\n\n\n## Getting settled in Toronto\n\n\nMoving to Toronto was a rather involved experience. Immediately after wrapping up one of my most brutal final exam schedules to date, I had to pack, donate, or dump my items from BC that I had nested during the pandemic. (It was... a lot of stuff.) Then I was busy with Amazon's pre-onboarding while also recruiting for Fall 2022 internships. (That's a whole [other story](https://michaeldemar.co/blog/rescind-playbook).)\n\n![My final exam schedule. Back-to-back networking, databases, and operating systems was not fun.](/blog-files/day-one-my-internship-at-amazon/003-b0a06e05-cccb-441b-b1f0-abf023437428.webp)\n\n![Leo, my pet Russian tortoise, also had to be sent home to stay with my parents.](/blog-files/day-one-my-internship-at-amazon/004-leo.webp)\n\nI boarded my flight and was off to Toronto. As an Edmonton native, Toronto was rather overwhelming. The city is gigantic and there is always something bustling. It truly is a \"concrete jungle,\" especially when you're working in the heart of downtown, situated right between the CN Tower and Scotiabank Arena.\n\nThankfully, I was able to take full advantage of what the city has to offer. And with weekend trips to Montreal, Niagara, and Muskoka, there was no shortage of nearby entertainment throughout my three-and-a-half months in the city.\n\n\n## From big tech to Bigger tech\n\n\nThe next major adjustment for me came in navigating life at a huge company. Make no mistake: Samsung, where I previously interned, is also large. However, there is something truly unique about \"Amazon-scale.\" When your intern class is nearly 15,000 folks, things will assuredly feel a bit different.\n\nThankfully, I had an awesome team and intern class around me to support me throughout the onboarding process. Amazon's onboarding, while extensive, is also exhaustive, leaving you with a full set of tools and knowledge to thrive in your time there. My initial nerves were replaced by excitement, and I dove head-first into our tech stack.\n\nI got onboarded to my project relatively quickly. Within the Supply Chain Optimization Technologies (SCOT) organization, I had the chance to work on a \"product tour.\" (Here's [an article](https://blog.asana.com/2018/10/move-fast-without-technical-debt-product-tours-react) from a former Asana intern about an analogous project for their core application.) It was built on top of a complex, multipage booking portal that used React. While I didn't anticipate being placed on a frontend project, I enjoyed it far more than I thought I would, and I learned a ton about today's challenges in scaling modern frontend technologies. (I'm even following this experience up by giving a React workshop at this year's [Hack The North](https://hackthenorth.com/) in Waterloo‚Äîmake sure to tune in.)\n\n![My desk!](/blog-files/day-one-my-internship-at-amazon/007-amazon-desk.webp)\n\n\n## Six lessons from the six\n\n\nIt was rare I had a day at work without some new learning or takeaway. Here are six of my highlights.\n\n\n### Lesson #1: There are no bad questions\n\n\nWhile I had a decent chunk of relevant React experience to leverage for my project, our application was still complex and tens of thousands of lines of code long. To navigate the tricky waters that come with being an intern in engineering, questions are your lifeline. I was able to on-board to our project right away by scheduling impactful one-on-ones and remaining curious about our project's anatomy.\n\nPersonally, my Achilles' heel as an engineer is getting bogged down by particularly challenging problems (and there are no shortage of those at Amazon). Asking questions turned out to be a fantastic shortcut for getting to the heart of an issue.\n\n\n### Lesson #2: Complexity is evil\n\n\nThere is one special question you can ask: \"why?\" Asking the right \"why?\" can help determine what exactly is desired by your end-user (or \"customer,\" in Amazon terms) and minimize feature bloat. In particular, I had chats with PMs from separate teams (...in entirely different continents), so finding cohesion in product vision and preventing unneeded complexity required careful question-asking.\n\n(As any good [Grug-brain developer](https://grugbrain.dev/) knows, complexity is an existential threat, so it should be eliminated at all costs!)\n\n\n### Lesson #3: Agility is your friend\n\n\nSomething interesting about the project I worked on was that it was actually a continuation of a former intern project. Often, Amazon interns complete a design phase for their project, scoping out the minimum viable feature set for an initial release before jumping into implementation.\n\nFrom nearly my first day, I was working on delivering an already-scoped design. I love getting hands-on, but quickly found myself in a cobweb of only partially ready code. I didn't take enough time to understand and revise the existing timeline, which left me trying to ship many features at once.\nThis led to large code changes that were difficult to test and debug.\n\nInstead, try to be as lean as possible in your code. Small commits, small pull requests, and minimally scoped changes make it easy to bisect changes when things, inevitably, go wrong. Also: any refactoring work must be completed prior to shipping new features.\n\n\n### Lesson #4: Community is key\n\n\nIt takes a village to raise a child, and it also takes a village to raise an intern. It's critical to develop open communication lines between yourself and your \"support network\" on the job. At Amazon, this consisted of my mentor, manager, my manager's manager, and the most senior engineer on my team. Scheduling regular one-on-ones and documenting the discussions levelled up my experience tremendously.\n\nThe idea of community goes beyond your team as well. It's also essential to immerse yourself in activities with your fellow interns and the broader city you live in as well.\n\n\n### Lesson #5: Culture isn't just buzzwords\n\n\nAmazon's leadership principles (LPs) are embedded into the DNA of the company. My co-workers would constantly leverage the LPs to guide hard decisions or steer meetings in the right direction. Beyond being the backbone of Amazon's culture, the LPs are also just brimmed with great life advice. As a former leadership student in high school, I had a lot of fun trying to embed ideas like \"Ownership,\" \"Invent and Simplify\" and \"Learn and Be Curious\" into my day-to-day at Amazon.\n\n\n### Lesson #6: Have fun\n\n\nIt's easy to get wrapped up in work and find yourself constantly worrying about return offers, your next internship, and the various other stressors of everyday life. Kick back with your co-workers when the chance arises and make the most of your internship. To help center myself, I would often reflect on where I came from to end up at Amazon. This kind of mindfulness exercise helped me make the most of my time at Amazon.\n\n\n## So... what's next?\n\n\nWhile I could not be more grateful for my time at Amazon, I also could not be more excited for what this next year has in store. I have a chance this August to rest and reconnect with family before I join Tesla this fall on the Supercharging team. I'll also be serving as an Undergraduate Teaching Assistant (UTA) for my first-ever 300-level course; namely, \"Internet Computing\" (CPSC 317) at UBC with Professor Alan Wagner.\n\nQuestions? Comments? Don't hesitate to reach out at [mdemar01@student.ubc.ca](mailto:mdemar01@student.ubc.ca).\n\nThanks for reading!"
    },
    {
      "createdDate": "2024-12-27T06:55:00.000Z",
      "description": "After having my internship offer rescinded, I'm sharing my game plan to navigate the job market and find new opportunities in tech.",
      "editedDate": "2024-12-27T07:14:00.000Z",
      "id": "169c4188-fa0e-807c-b7bd-f22056b73ac1",
      "publishedDate": "2022-07-17T23:55:00.000-06:00",
      "slug": "the-rescinded-internship-offer-playbook",
      "status": "Published",
      "tags": [
        "Blog",
        "Technical"
      ],
      "title": "The rescinded internship offer playbook",
      "coverImage": "/blog-files/the-rescinded-internship-offer-playbook/cover-email.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 17th, 2022.\n\nThis upcoming fall, I was set on making a number of fairly major life changes. Firstly, I was about to move from one of the world's largest technology companies to a cryptocurrency start-up. Secondly, I was going to pack my bags and move from Canada to Palo Alto, California. And thirdly, I was going to do it all basically on my own.\n\nAs of Thursday, I've been thrown back to square zero. Due to pressures in the cryptocurrency space, coined (pun-intended) a \"crypto winter\" (though frankly it seems pretty sunny in Toronto these days...), my offer at [BitGo](https://bitgo.com/) was rescinded.\n\n![The e-mail from BitGo.](/blog-files/the-rescinded-internship-offer-playbook/001-email.webp)\n\nTo be totally candid, I had kind of seen this coming. There were a number of major shake-ups with the early talent team that had recruited me in the first place, and I'd already seen the likes of Coinbase and Shopify pull similar moves. It's an unfortunate reality of working in an emerging industry, and I was aware of the risk in accepting the role. I'm still as passionate as ever about the potential of web3, and I know it won't be long until I'm back.\n\n![Shopify pulls internships.](/blog-files/the-rescinded-internship-offer-playbook/002-shopify.webp)\n\nI'm keeping my chin-up and have my focus fixed firmly on getting back to square one. In this post, I want to share my \"game plan\" for how I'm going to strive to achieve just that. It's essentially the advice I would give myself if I could go back two years and coach my freshman-self through a first round of internship applications. Hope you enjoy.\n\n\n## 1. Use your network\n\n\nThis piece is especially important when you're just getting started with recruiting in tech, or when you've faced a bit of a setback. To use a clich√©, \"your network is your net worth!\" I find computer science doesn't have the same culture around recruiting, coffee chats, etc., as other industries, but it can truly accelerate your career.\n\nUse social media to be open about projects you're working on and roles you're looking for. Keep your profiles up-to-date and try to stay somewhat active throughout the year. I think everyone feels a bit of anxiety around posting on LinkedIn, but that's easily one of the most effective channels. I've had 25,000+ impressions on my latest post. \"Tech Twitter\" is also a great place to stay active; I often find early-stage founders recruit directly from the site. Relying on visible, open job applications like Indeed or LinkedIn is merely the tip of iceberg of what's out there!\n\n(Another more \"bold\" strategy is becoming a content creator YouTube. I've met a ton of cool people after posting [this](https://youtube.com/watch?v=9FP8esDPPKY) video on advice for getting into the computer science major at UBC. To this day, I continue to get emails and DMs from students all across the globe!)\n\nAlso, go to stuff! I love using apps like Eventbrite and Meetup to see what's happening in my area. Attending events is bar-none the best way to meet people; networking \"online\" is not nearly as effective as just bumping into strangers at a conference. Try to step out of your comfort zone and put yourself out there. You'd be surprised what can turn up!\n\n\n## 2. Don't be shy\n\n\nWhen it comes to recruiting, you simply cannot afford to be shy. It's akin to that hackneyed quote, \"shoot for the moon, and you're destined to land in the stars.\" Any ounce of impostor syndrome will hold you back from sending that one key cold email, or submitting an application to that one key role. After all, given the sheer size and rapid growth of the technology industry, it has been and continues to be a \"numbers game.\" Finding a job you love takes a fair amount of dedication, and obliges casting a wide net.\n\nI want to add a caveat here as well. This piece of advice I did not follow _at all_ last summer, and I got extremely lucky to end up at Amazon. I applied to a minimal set of jobs, and instead was bailed out by Greylock and a few \"LeetCode easy's.\" Amazon is a fantastic company, and I am extremely fortunate to be where I am, but without casting a wide net, you'll be left with a lingering \"what if?\" Always try to aim higher; contentment will limit you!\n\nA good way to apply this right away is to cold email your dream companies. For example, I've always wanted to work in the NLP space, and a dream company of mine is [Voiceflow](https://voiceflow.com/). I sent a brief, direct email to the founder, and I heard back! While it didn't lead to a job, I came pretty darn close to a dream role. All from email!\n\n![An e-mail to Braden Ream, the CEO of Voiceflow.](/blog-files/the-rescinded-internship-offer-playbook/005-voiceflow.webp)\n\nThis time around, I am working diligently and systematically to exhaust all possible avenues. Persistence pays dividends in the long run.\n\n\n## 3. Gratitude in all things\n\n\nIn relying on your network's support and applying just about... everywhere, you must lead with gratitude. It is vital to show thanks for those that support you along every step of the journey. I would not be at my current university or in my current job if it weren't for the support of my family, a host of invaluable mentors, and a number of friends over the years encouraging me to keep pushing. It's essential to take time to show thanks; it's the right thing to do!\n\nThat being said, it's often overlooked. In the hustle and bustle of trying to get a job, it is easy to forget the follow-up thanks. Leading with gratitude is key.\n\nHere's an easy way to apply gratitude right away. _Always_ follow up after chats and interviews. Sending a thank-you email is a must-do in my book, and can help you stand out. You can try kick-starting relationships with past mentors as well. It is never too late to rekindle and say thanks.\n\n\n## 4. Builders build\n\n\nIf I could only pick one rule to keep, it'd be this one. The beauty of computer science is that no one can stop you from building. Like really, no one. (OK... maybe like, the FBI. But that's about it.)\n\nLeft without a job, there are countless ways to upskill and get ready for the next round. My favorite is building out 'little apps' (though a fully-fledged start-up is great, too). Participating in hackathons is a great way to get this going. Ask your friends and family what kinds of problems there having, and make little hacks for them. Keep them accessible for others online, and do it [in public](https://swyx.io/learn-in-public). Another good trick for easy adoption is building products for other developers; some good examples are CLI tools and IDE extensions.\n\nThe best experience I had with this was in Summer 2020 participating in an ex-Uber engineer-led program called [\"Summer of Shipping\"](https://summerofshipping.com/). It was an awesome community to helped folks bounce back from a summer with a _ton_ of offers rescinded. I even worked at a start-up idea [weNote](https://wenote.ca/) that I'm hoping to return to this upcoming year!\n\n![My landing page for weNote.](/blog-files/the-rescinded-internship-offer-playbook/009-wenote.webp)\n\nThere's also tons of resources online where you can learn for free, if you need a break from purely creating.\n\nJust remember: the beauty of software is that truly anyone where anywhere can get started today. So don't wait for a FAANG offer to get started; start building today.\n\n\n## In parting\n\n\nThose are the 4 rules that I'll be following while re-recruiting for the fall. Have any you would add? Feel free to give me a shout at [mdemar01@student.ubc.ca](mailto:mdemar01@student.ubc.ca). I'm always happy to chat."
    },
    {
      "createdDate": "2024-12-27T06:28:00.000Z",
      "description": "In this post, I explore the importance of daily highlights that help fill our metaphorical cups, especially during challenging times.",
      "editedDate": "2024-12-29T23:22:00.000Z",
      "id": "169c4188-fa0e-8062-87fb-cc0fc275b670",
      "publishedDate": "2022-07-03",
      "slug": "fill-your-cup",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "Fill your cup",
      "coverImage": "/blog-files/fill-your-cup/cover-collision.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 3rd, 2022.\n\nEvery single day, you start out as an empty cup.\n\nHumbling, right?\n\nBeyond your laundry list of personal to-dos, slog of tasks at work, and mountain of messages to which you need to respond, you actually need to focus on just one thing each day. And that's filling your cup.\n\n\n## The inspiration\n\n\nI came across an idea loosely linked to this end product from YouTuber [Ali Abdaal](https://youtube.com/c/aliabdaal). His rather simple, but genius suggestion was to mark a highlight each and every day of your life. \"Mark\" can look differently depending on your routine; my weapon of choice is inscribing an \"H\" beside an item from my bullet journal. In some way, though, you should be tracking your highlights for easy reflection.\n\nHaving a \"highlight\" each day doesn't mean spending every day at a concert, or a sports game, or at the hottest club. Rather, it's something that brings you a bit of needed warmth when life's natural chaos ensues. It can be as simple as a great meal, a brisk walk, or a quick phone call. They're moments that you'd want to capture and put in jar for safe-keeping, but often a quick photo will have to do.\n\n\n## The idea\n\n\nAnd those highlight moments help \"fill your cup.\" (The \"highlight\" idea for me is a bit plain, but I think a visual analogy gets it across better. Maybe that's my inner-teacher speaking.)\n\nNot all cups are created equally, either. After a particularly stressful day or week, I find my cup becomes more of a vat. Other times, I'm a bit more of a teaspoon. Being aware of this ebb and flow though has proven to be a particularly powerful idea when it comes to managing my mental health.\n\nWith the pandemic, we had a bit of a drought. It was hard to stumble across cup-filling-moments, so to speak, and I did not effort to create them when they were most needed. On an empty cup, it's hard to be yourself. Not just in terms of the capitalist-fuelled \"can I reach _Inbox Zero_?\" sense, but spiritually, just 'being' yourself.\n\n\n## A year half-full\n\n\nAnd since we've reached the halfway point of 2022, I figured I'd challenge myself to look back on my favorite cup filling moments from this year so far.\n\n\n### Board games at a bar (January)\n\n\n![Scrabble at Browns, with the fellas.](/blog-files/fill-your-cup/001-scrabble.webp)\n\nI'm a nerd at heart, and after months of Wordle, I had to put my new skills to the test. It turns out only mastering 5-letter words is not all that beneficial when it comes to playing Scrabble at Brown's. Regardless, board games at a bar is definitely an underrated activity.\n\n\n### A moment with some trash (February)\n\n\n![Me n‚Äô my trash!](/blog-files/fill-your-cup/002-garbage-cleanup.webp)\n\nI hadn't planned an event in ages. After a year of mostly typing 60 WPM in front of Visual Studio Code (or Vim, if I'm feeling adventurous), it felt great to organize a beach clean-up on the UBC campus. This is a nice moment I had with some trash, after the event.\n\n\n### Volunteering at Collision Conf 2022 (June)\n\n\n![Volunteering at Collision 2022.](/blog-files/fill-your-cup/003-collision.webp)\n\nAnd last but not least, my favorite recent highlight has to be volunteering at this year's Collision Conf. I still remember dreaming of attending as a first-year student working on my first, rather half-baked start-up idea. Since then, my passion for founding has only grown, and I'll be looking to get to work in this last half of 2022. I'll definitely be back at Collision, though hopefully as a founder rather than a volunteer!\n\n\n## In sum\n\n\nSo, those are my cup filling moments. As I battle of this week's edition of the Sunday Scaries, finally getting back to writing again just might fill my (rather average-sized) cup for today."
    },
    {
      "createdDate": "2024-12-27T23:58:00.000Z",
      "description": "This blog post explores the use of machine learning to predict credit card defaults, highlighting the challenges and promising results of a LightGBM model based on Taiwanese financial data.",
      "editedDate": "2024-12-30T18:24:00.000Z",
      "id": "169c4188-fa0e-80a9-b30a-fbd22565ada7",
      "publishedDate": "2022-04-18T18:58:00.000-06:00",
      "slug": "predicting-credit-card-defaults",
      "status": "Published",
      "tags": [
        "Project",
        "Technical",
        "School"
      ],
      "title": "Predicting Credit Card Defaults",
      "coverImage": "/blog-files/predicting-credit-card-defaults/cover-ales-nesetril-credit-card-unsplash.webp",
      "content": "_The following blog post was written for the final homework submission of_ [_CPSC 330, UBC's \"Applied Machine Learning\" course_](https://github.com/ubc-cs/cpsc330)_. In the course, my partner Max and I got a hands-on introduction to machine learning with Python via sklearn._\n\n![ales-nesetril-credit-card-unsplash.jpg](/blog-files/predicting-credit-card-defaults/001-ales-nesetril-credit-card-unsplash.webp)\n\n[hw6.pdf](/blog-files/predicting-credit-card-defaults/002-hw6.pdf)\n\n\n## Problem\n\n\nDefaulting on a credit card payment is a challenging situation for all those involved. The individual who defaulted is tasked with rebuilding their credit score, and the issuer is laden with the debt. Ideally, a financial institution could _predict_ whether or not someone will default ahead of time, and prevent it from happening in the first place.\n\nWhile this is a daunting task‚Äîand one that requires sensitivity given the fact we are dealing with people's financial livelihoods‚Äîthis is a situation where machine learning can be of use.\n\n\n### Question\n\n\nWe'll apply machine learning techniques to answer the following question.\n\n> Will this person default next month on their credit card payment?\n\nWith data relating to that person's demographics, payment history, and other financial information, we can attempt to predict the answer to this question.\n\n\n### Data\n\n\nThe data set we used is publicly available on [Kaggle](https://kaggle.com/uciml/default-of-credit-card-clients-dataset). In contains demographic information such as sex, education, marriage and age; information regarding and individual's finances including limit balance, repayment status, bill amounts, and payment amounts. Finally, it contains whether or not that individual really _did_ default next month.\n\nThis is simply a high-level description of the data; for a more in-depth view, consult Kaggle or our [full report](https://www.notion.so/michaelfromyeg/hw6.pdf).\n\n\n## Exploration\n\n\nBefore we delve into our analysis, let's get a better sense of the data available.\n\nTo begin with, we portioned off a chunk of our data, namely 25%, to eventually assess our model's effectiveness after our model is already created. Let's explore the remnants.\n\n\n### Exploratory Data Analysis (\"EDA\")\n\n\nWe have 225,000 rows in our data available for training use, each representing an individual and their associated \"features\" (such as age or sex) as outlined above.\n\nThe \"average\" demographic in this data is someone who's single (instead of married), has a university-level education, and an age of about 35.\n\nThe individual with the highest limit balance is a 47 year old female with precisely NT$1,000,000 available, equivalent to roughly USD$100,000. This is definitely an outlier; the distribution for the rest of the balances is shown below. (Note dollar amounts are in New Taiwan dollars.)\n\nWe find most balances in the range of NT$50,000 (~USD$6,500) to NT$100,000 (~USD$13,000) which seems reasonable.\n\n![distribution-of-payamt2.png](/blog-files/predicting-credit-card-defaults/005-distribution-of-payamt2.webp)\n\n![distribution-of-limitbal.png](/blog-files/predicting-credit-card-defaults/006-distribution-of-limitbal.webp)\n\n![distribution-of-classes.png](/blog-files/predicting-credit-card-defaults/007-distribution-of-classes.webp)\n\nThe repayment statuses in the month of August 2005 are, for whatever reason, highly skewed towards 0, which is the encoding of \"use of revolving credit.\" A visualization of this is shown below.\n\nIt might be interesting to investigate any geopolitical events that occurred in the same time frame of this data set, the summer and fall of 2005, to account for any global financial trends.\n\nWith a better understanding of the data at hand, we proceed to our analysis.\n\n\n## Analysis\n\n\nBelow is a description of our final model, and the results it yielded.\n\n\n### Model\n\n\nFor our final model we opted to use [LightGBM](https://lightgbm.readthedocs.io/en/latest/index.html), which is a gradient boosted tree based model. Gradient boosted models are ensembles of weaker prediction models, in our case, decision trees.\n\nLightGBM greatly outperformed the Decision Tree model. It also consistently outperformed the Random Forest model, even after we performed feature selection using `RFECV` and hyperparameter optimization using random search.\n\n\n### Results\n\n\nThe LightGBM model achieved an accuracy of 0.82, F1-score of 0.48, and recall of 0.38. This means that from our test data, we would correctly predict whether or not someone would default about 82% of the time. Among all of the examples of \"did default,\" we're correct only 38% of the time (‚Äîgiven the imbalance in the data set, this is somewhat to be expected). These results are promising, and should generalize well on \"deployment data\" since the test and validation scores are similar.\n\nIt's also interesting to look at how important our features were in the LightGBM model. SHAP force plots are one way of achieving this; without diving into depth here, just know that \"red\" means \"did not default,\" and a bigger arrow implies more impact.\n\nIn the two plots above, we see that PAY1 played a major role. Perhaps this is because if an individual gets off on the wrong foot, they are unlikely to ever recover. Banks might be incentivized to try to get on top of late payments immediately, to prevent financial hardships from spiraling into an eventual default!\n\n![shap-force2.png](/blog-files/predicting-credit-card-defaults/009-shap-force2.webp)\n\n![shap-force1.png](/blog-files/predicting-credit-card-defaults/010-shap-force1.webp)\n\n\n## Reflection\n\n\nWhile we are satisfied with our results, there are some caveats that should be made known before anyone attempts to use this model on \"real world\" use-cases.\n\nFirstly, the given data suffers from class imbalance. Most of our examples were of type \"did not default,\" at a ratio of nearly 3-to-1. The imbalance in our data was naturally occurring, so we asked ourselves what kind of error we were trying to minimize. We were concerned with minimizing false negatives, and so we chose to focus on recall as our evaluation metric. Sometimes naturally occurring class imbalance is okay to ignore. However, we believe that a possible improvement of our modeling could be to undersample or oversample the data to attempt to further address class imbalance.\n\nSecondly, the data available here was highly localized. All of our examples were from Taiwan, and so it is likely that our modeling would not generalize well to anywhere else in the world. Applying this model as a US Bank, for example, would be inappropriate as different cultures may exhibit different financial habits.\n\nFinally, there may have been overfitting on the hyperparameters. The final model described here was not our only attempt at this problem; rather, it was just our best attempt. Since we re-tested with various models and ran our hyperparameter tuning more than once it is _possible_ that we unintentionally overfit our model.\n\n\n## Conclusion\n\n\nFrom our data set, we were able to produce a LightGBM model that showed promising results, with a recall score of 0.38. In the future, we could look to further tune our LightGBM attempt to improve on our performance!\n\nThanks for reading! Hope you enjoyed it."
    },
    {
      "createdDate": "2024-12-27T23:56:00.000Z",
      "description": "A user-friendly tool to effortlessly create and manage citations for academic assignments.",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-80b5-9006-c1f1c0f4d3f5",
      "publishedDate": "2021-06-04T18:58:00.000-06:00",
      "slug": "jcite",
      "status": "Published",
      "tags": [
        "Project",
        "Technical",
        "School"
      ],
      "title": "jCite",
      "coverImage": "/blog-files/jcite/cover-zotero.webp",
      "content": "Create and manage your citations without all the headaches!\n\n\n### Background\n\n\nThis project was made for CPSC 210, a UBC second-year course focused on software construction. The course uses Java, and likewise this project was made using Java and JavaFX for the UI. I asked my girlfriend if she had any project ideas, and she mentioned she struggled keeping track of citations for her assignments, so I wanted to build a tool that could meet her needs. I felt the exact same feeling when I wrote my 4,000 word Extended Essay in high school. Trying to remember and keep track of citations can be hard if you're not an experienced writer.\n\n\n### Usage\n\n\nA user can create an account and manage a list of assignments. With each assignment, they can paragraph-by-paragraph manage citations (e.g., who are you citing, what page number, etc.) and then automatically generate a works-cited page with reported \"confidence.\"\n\n![zotero.png](/blog-files/jcite/000-zotero.webp)\n\n\n### How it's made\n\n\nThe project is made with vanilla Java and JavaFX.\n\n\n### Challenges\n\n\nI struggled quite a bit with the algorithm to generate citations, but I'm happy with what I ended up with! Maybe I'll release it separately as an API or something.\n\n\n### Accomplishments\n\n\nI think the project structure is quite nice, and I'm happy with the UI! It was my first time using JavaFX.\n\n\n### Future\n\n\nIt'd be cool to port this to an Android app or something. I should also probably created a \"released\" version."
    },
    {
      "createdDate": "2024-12-27T23:54:00.000Z",
      "description": "groUber simplifies carpooling for event planners, making it easy to coordinate rides with friends and optimize schedules effortlessly.",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-8043-9009-e3c299828b86",
      "publishedDate": "2020-08-06T18:58:00.000-06:00",
      "slug": "grouber",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "groUber",
      "coverImage": "/blog-files/grouber/cover-grouber.webp",
      "content": "![poster-01.png](/blog-files/grouber/000-poster-01.webp)\n\ngroups + Uber = groUber. Source code available [here](https://github.com/michaelfromyeg/groUber).\n\ngroUber is aimed to help event planners create carpools and was built for To the Moon and Hack, [an MLH event](https://mlh.io/). (If you're going to use this project to plan your event, remember to stay 6ft apart!)\n\n\n### Motivation\n\n\nThis project was built by a group of 5 students from UBC in Vancouver, BC who love automating things. And one horrific task all of us have run into when planning our events is creating a workable carpool schedule.\n\nIt's a great option for getting your group together: whether it be parents figuring out how best to get their kids to soccer practice, or friends accommodating those without access to a car, carpooling is common, but creating a plan can be painful, to say the least.\n\nYou finally come up with a workable schedule: everyone can make it to the event, no driver has to go in annoying, wasteful loops, and everything can start on time.\n\nThen a driver with 4 seats drops out. And you have to do it all over again. No, thanks.\n\n\n### Introducing: groUber\n\n\nWith groUber, never go through that headache again. As an event organizer, create your event, send an invite link to your friends, and create a carpool schedule with one click. As a participant, simply receive a link, RSVP, and inform the organizer of how many seats you have available. You'll receive a schedule on the day-of.\n\nUsing the Radar API and the Google Maps API, along with a bit of algo-magic, our app will create the most optimal carpool schedule for everyone involved. We were hesitant to do this project at first; the idea of designing an algorithm to find the \"best\" carpool strategy was intimidating to say the least. After some research, it turns out this is actually classified an NP-hard problem. We didn't need to solve the problem generally though, and were able to design a heuristic algorithm to be able to compute this with fairly good results. Here are a few examples of scholarly work in this area. It took great teamwork, persistence, and a decent amount of caffeine to get this working.\n\nNow, drivers won't have to waste gas, and everyone will get there on time. Someone drops out? No problem, our app will allow you to adjust your schedule, painlessly.\n\ngroUber is ride-sharing for your group of friends, without all the expenses and overhead. Do a favor for the environment, and for your stress-levels, and start using groUber today.\n\nHere's our [whitepaper](https://docs.google.com/document/d/e/2PACX-1vSLo8DhZ7p-VgPnmieasD01zZ2_76uMxPxSwVErq3_gQPvpokrFI4G5SHA1Pxrc9b9ouhK5yvL-4X3t/pub) where you can find a more in-depth justification for this hack! We also have a [slide deck](https://docs.google.com/presentation/d/e/2PACX-1vRY4A2dxP3vd1L7tY9gNC1Y0oegweKaiE9ZRHzulQArcLDld2zxErJQPk2TWvtwONXqdFWSECFlWEhh/pub?start=false&loop=false&delayms=15000&slide=id.p) for the visual learners out there.\n\n\n### Stack\n\n\n\n- TypeScript, React\n- Node.js, npm\n\n- Firebase, including authentication, hosting, and Firestore\n- GitHub Actions\n\n\n### Usage\n\n\nHead to [grouber.online](https://grouber.online/). Sign-up using your Google account.\n\nCreate your event with all key details, and send an invite to your to-be attendees. Once they RSVP, you'll see their details on your event dashboard. Then, generate your event's carpool schedule in one click!\n\nParticipants must submit their address, if they're driving, and if so, how many seats they have available in their vehicle.\n\nCheck out some screenshots of the application below!\n\n![grouber.png](/blog-files/grouber/006-grouber.webp)\n\n![homescreen.png](/blog-files/grouber/007-homescreen.webp)\n\n![RSVPPage.jpg](/blog-files/grouber/008-RSVPPage.webp)\n\n![appMap.jpg](/blog-files/grouber/009-appMap.webp)\n\n![branding.png](/blog-files/grouber/010-branding.webp)\n\n![dashboard.jpg](/blog-files/grouber/011-dashboard.webp)\n\n\n### Contributing\n\n\nCheck out the GitHub repository for more information."
    },
    {
      "createdDate": "2024-12-27T06:59:00.000Z",
      "description": "Reflecting on a transformative summer during the COVID-19 pandemic, I navigated unexpected challenges and found unique opportunities for growth and learning.",
      "editedDate": "2024-12-27T07:13:00.000Z",
      "id": "169c4188-fa0e-80e9-b1df-e36f4325a24e",
      "publishedDate": "2020-07-18T00:07:00.000-06:00",
      "slug": "my-covid-summer",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "My COVID summer",
      "coverImage": "/blog-files/my-covid-summer/cover-notion.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 18th, 2020.\n\nIt's a Friday after classes. I'm grabbing a quick bite at one of UBC's only on-campus sit-down restaurants with a close friend, and a Gmail notification appears on my phone. As soon as I saw \"UBC\" in the subject line, I already knew what it was going to be.\n\nStudents had already been buzzing about it for the past week, and I even [tweeted](https://twitter.com/michaelfromyeg/status/1238500414053429248?ref_src=twsrc%5Etfw) about it. We were _finally_ going online.\n\n> Classes are suspended at the UofA, UofT, McGill, Stanford, Western, UDub, Harvard, and UBC is still open... Pumped to go earn my 2% iClicker participation marks today.\n\n\t‚ÄîMichael DeMarco (@michaelfromyeg) [March 13, 2020](https://twitter.com/michaelfromyeg/status/1238500414053429248?ref_src=twsrc%5Etfw)\n\nTrailing behind the universities I mentioned in my Tweet, all of our classes were going remote starting the following Monday. Even though I had seen it coming, I was still a bit shell shocked. I think everyone had their \"COVID-19 moment\", where it stopped being a headline you read about in the news, and started dictating your way of life. Mine came in a 3-part saga.\n\nFirst, it was [Hacktech](https://hacktech.io/). Over Christmas break, a friend shared that Caltech's hackathon had opened their applications for 2020, and I thought it'd be a neat opportunity. I poured over my application, and with a bit of good fortune, got accepted. I booked my ticket to Pasadena and could hardly contain my excitement. Then, it moved online. Four-hundred dollars down the drain, I was a bit disappointed, but I got some friends together from UBC and ended up actually submitting a [project](https://rapviz.appspot.com/) and earning a finalist distinction. This was a solid silver-lining; my fingers are crossed that I may take part in the event next year.\n\n_More on RapViz: the source code for the project is available_ [_here_](https://github.com/michaelfromyeg/rapviz)_. My teammates and I used Flask, React, and the Genius API to put this together. It definitely needs a touch-up, but the code is most of the way there. It also needs to be refactored, splitting apart the API code from the front-end._\n\n![Here‚Äôs RapViz.](/blog-files/my-covid-summer/005-rapviz.webp)\n\nSecond, it was, as I mentioned, school. Classes being online turned campus into a ghost town almost overnight. First-years flooded out of residents, clubs scrambled to pivot scheduled events online, and I clung on for dear life in each of my classes, submerged in school work. Within a few weeks, I managed to find a somewhat free weekend, pack my life away into four plastic boxes, and drive back to Edmonton. Over that weekend, I got an email from a software developer at the Government of Canada letting my know the internship I had just interviewed for was being eliminated. It was a bad week, to say the least.\n\nThird, it was [SUNIA](https://sunia.ca/). SUNIA is this week-long summer program I've worked with for nearly three years now. I started off in a generic programming coordinator role, helping make UN-related educational material; in my second year, I led marketing and did a fair amount of graphic design, while also working as our \"CTO\" (I snicker at the title, too); this year, I was working as the staff registrar, and also doing a bit more technology related work. [SUNIA got cancelled.](https://sunia.ca/covid) Again, like my semester moving online, I had seen this coming, but still, it meant my fears about a fully indoors summer and an online fall semester were validated.\n\nI was defeated, but I still wanted to make something of my summer. Being so late in the recruiting year, my outlook was fairly bleak. [Here's](https://notion.so/michaelfromyeg/49058c86c8d44605b65f9637d8f9e8a7?v=3acd8e103476491f833c4d69a39995df) the Notion page where I tracked my applications. Nothing too exciting of note; I had to apply to a ton of start-ups, some unpaid internships, and a lot of, erm, _interesting_ positions, to say the least.\n\n![My Notion job board.](/blog-files/my-covid-summer/009-notion.webp)\n\nThen, I thrice got lucky. The first stroke of luck came in the form of an offer to TA an introductory computer science class. I had TA'd during the second semester of my first-year, and leveraging that, I nabbed a TA position for the first summer term. Being only a 10-hour per week role, I still wanted to do a little more. But, it was a definite start.\n\nI also was able to leverage LinkedIn and find a part-time position with my school's Electrical and Computer Engineering (ECE) Department. If I'm honest, I think posting on LinkedIn is mostly a waste of time. There's just too much clutter on the platform; your time would be better spent working in public on GitHub, and tweeting your progress. But again, somehow a post of mine reached a communications lead working with ECE who thought I'd be a good fit for a position they'd just opened. ECE wanted to launch a new website they were working on, but needed help seeing it across the finish line. Their [old website](https://ece.ubc.ca/), built using Drupal, was getting near-impossible to maintain, and they had already made a dent in a new WordPress site. With ECE, I've written a [few](https://ece.ubc.ca/news/202005/ece-capstone-faculty-award-recipients) [blog](https://ece.ubc.ca/news/202006/ece-phd-candidate-awarded-prestigious-microsoft-research-grant) [posts](https://ece.ubc.ca/news/202007/ubc-masc-student-developing-wearable-device-track-heart-and-brain-signals) about research ECE grads are doing, wrote a lot of HTML, CSS, and a bit of PHP for the new WordPress site, maintained some legacy code on Drupal, and done a bit of marketing work. It's been a cool gig. I also wrote a few projects to help me automate tasks at work. [Here's](https://github.com/michaelfromyeg/pylink) one, which interprets HTTP status codes into a \"report\", given a list of URLs, and [here's](https://github.com/michaelfromyeg/rECEsearch) another, which collects UBC ECE research and formats it in a way which can be uploaded to WordPress.\n\nFinally, there was a _third_ stroke of luck I would never have seen coming. For the past few months, I'd been doing _ish_ contract work with a IoT company called [Artesian Software](https://artesiansoft.com/). I say _ish_ because though I was on board as a developer, there was simply no work to be done. Then, thankfully, around about mid-May, the company signed a contract, and we were off to the races. We've been building a platform to support businesses communicate with customers post-COVID. You can see my handiwork [here](https://shieldscore.com/). I get to work on a modern tech stack, which is a nice change of pace from Drupal: React (and React Native at one point), Node, SCSS, AWS (RDS with PostgreSQL, Dynamo, Cognito), ESLint, Stylelint, Prettier, and more. I've worked with the Stripe API, created my first microservice, learned a ton about REST, and even more about React.\n\n![The ShieldScore product.](/blog-files/my-covid-summer/018-artesian.webp)\n\nWanting to write a bit more code, I also joined an online community for hackers looking to replicate the in-person intern experience called [Summer of Shipping](https://summerofshipping.com/), and joined a pre-seed accelerator [program](https://studentstartuplife.com/programs/student-summer-program) from Startup Edmonton, where I've been building [weNote](https://wenote.ca/). I've also participated in a couple of hackathons; at one I wrote [a VS Code extension](https://marketplace.visualstudio.com/items?itemName=michaelfromyeg.vscode-puzzle) to help you practice interview-style coding problems in your editor, which won me the \"best use of an external API award.\" (Even though I wrote my own API and did some, erm, questionable scraping. Whoops.) It currently has 14 installs, which is pretty cool!\n\n_Quick update for 2022: it now has 127+ installs and 10+ stars on_ [_GitHub_](https://github.com/michaelfromyeg/vscode-puzzles)_! Development is still actively continuing; my next planned feature is to support puzzles from Advent of Code._\n\nLooking forward to the fall semester, I'm definitely nervous. Online school is hard. There's no getting around that fact. I'll be moving back to Vancouver, so hopefully cutting down the distance and being at least in the vicinity of campus should help my productivity. I'll also gain a bit of a community to rely on.\n\nBeyond the fall, I also have to hunt down co-op positions for winter and summer 2021. The COVID and post-COVID job market is assuredly a \"buyer's market,\" meaning that employers now have the pick of the litter when it comes to applicants. It's a scary reality, but it's one that's not going away anytime soon. My plan, for now at least, is to keep building projects, keep learning, keep being curious, and to stay vigilant. I'm not going to bother betting on getting lucky with offers again; lightning never strikes twice in the same place."
    },
    {
      "createdDate": "2024-12-27T23:57:00.000Z",
      "description": "A platform designed to bridge high school students with volunteer opportunities from various organizations.",
      "editedDate": "2024-12-30T18:23:00.000Z",
      "id": "169c4188-fa0e-80be-8567-dbd1c556f154",
      "publishedDate": "2020-05-03T18:58:00.000-06:00",
      "slug": "massive-volunteering",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "Massive Volunteering",
      "coverImage": "/blog-files/massive-volunteering/cover-massive-homepage.webp",
      "content": "A website built to connect high school students with organizations actively searching for volunteers. [Here's](https://github.com/michaelfromyeg/Massive-Volunteering) the GitHub repository.\n\n\n### Background\n\n\nIn high school, I completed the IB program. For my Computer Science Internal Assessment (IA) I decided to build a website for a club I was also helping lead. The basic goal was to be able to allow organizations looking for volunteers to advertise opportunities directly to high school students.\n\n![massive-homepage.png](/blog-files/massive-volunteering/001-massive-homepage.webp)\n\n\n### Usage\n\n\nVolunteers can create an account and profile. Organizations can as well. There's a blog-style feed of opportunities that appears in the user's feed.\n\n\n### How it's made\n\n\nThe project is built using Python Flask and Bootstrap for the styling.\n\n\n### Challenges\n\n\nThis was the first real web project I ever built, so I had hard time building things without being reliant on tutorials.\n\n\n### Accomplishments\n\n\nThe app works pretty nicely, and it received a \\$500 grant from the Edmonton Community Foundation! I hope to deploy it Summer 2020.\n\n\n### Future\n\n\nI need to add the organization \"flow,\" and create better ways for users to be notified. An iOS and Android variant of this project would also be really cool! The GitHub issues are [viewable](https://github.com/michaelfromyeg/Massive-Volunteering/issues) here."
    },
    {
      "createdDate": "2024-12-27T23:53:00.000Z",
      "description": "Easily upload and match your CSV data with our intuitive tool, streamlining your data management process!",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-8039-a7f6-e9d09e908104",
      "publishedDate": "2020-04-29T18:58:00.000-06:00",
      "slug": "csv-upload-tool",
      "status": "Published",
      "tags": [
        "Project",
        "Technical",
        "Work"
      ],
      "title": "CSV Upload Tool",
      "coverImage": "/blog-files/csv-upload-tool/cover-upload.webp",
      "content": "Upload and match CSV data. Simple, but practical! Check out the project for yourself, [here](https://michaelfromyeg.github.io/CSV-Upload-Tool).\n\n\n### Background\n\n\nThis project was made for Artesian software, to be used in a more large scale project.\n\n\n### Usage\n\n\nA user can upload a CSV file with any data, and then can match their \"headers\" (the columns) to the one's anticipated by the app. With these pairings, the app then \"reassigns\" the user's data with the new headings and saves it to a SQLite database.\n\nCheck out some screenshots below!\n\n![succeed.png](/blog-files/csv-upload-tool/001-succeed.webp)\n\n![upload.png](/blog-files/csv-upload-tool/002-upload.webp)\n\n![failed.png](/blog-files/csv-upload-tool/003-failed.webp)\n\n\n### How it's made\n\n\nThe project was made using React, Flask, and SQLite. I used Bootstrap to style the components.\n\n\n### Challenges\n\n\nI struggled a decent amount to get SQLAlchemy to accept JSON data. Turns out they have a column type specifically for JSON. Consider this your friendly reminder to read the docs carefully!\n\n\n### Accomplishments\n\n\nI think the user experience is really smooth, and the app is visually quite appealing!\n\n\n### Future\n\n\nIt'd be great to implement drag and drop."
    },
    {
      "createdDate": "2024-12-27T23:52:00.000Z",
      "description": "An innovative AR Android app that lets you visualize the latest Best Buy products in your home before making a purchase.",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-806d-b551-c51ab6782d6d",
      "publishedDate": "2020-01-30T18:58:00.000-07:00",
      "slug": "arpro",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "ARPro",
      "coverImage": "/blog-files/arpro/cover-award.webp",
      "content": "![award.jpg](/blog-files/arpro/000-award.webp)\n\nAn AR Android application to let you view the latest Best Buy product in your home, from the comfort of your pyjamas.\n\n\n### Background\n\n\nThis project was developed by Michael DeMarco and Liang Liu, and backed by a business model developed by Benji Li, Daniel Frydman, and Ophir Greif. It was built at BizHacks 2020, a business-oriented hackathon sponsored by Best Buy and hosted at UBC. My team and I developed a business solution for Best Buy, and took home the 2nd place prize out of over 50 teams.\n\n\n### Usage\n\n\nThe project allowed users to determine what product dimensions were right for them from the comfort of their own home. Not sure if a 60\" or 62\" TV is right for you? Use our app to increment sizes of a mock TV displayed right on your wall, courtesy of the latest AR technology, or do a side-by-side comparison, or even enter a custom amount of inches!\n\nCheck it out below!\n\n![large-tv.jpg](/blog-files/arpro/001-large-tv.webp)\n\n![products.jpg](/blog-files/arpro/002-products.webp)\n\n![small-tv.jpg](/blog-files/arpro/003-small-tv.webp)\n\n\n### How it's made\n\n\nThis project was built using Java and ARCore.\n\n\n### Challenges\n\n\nGetting the AR to work properly was quite tricky; we ran into a number of issues finding suitable 3D models.\n\n\n### Accomplishments\n\n\nThe app works really nicely, and it took home 2nd place! It's an interesting, minimalist take on the idea of \"visualize furniture in your living room\" that Ikea made quite popular.\n\n\n### Future\n\n\nWe should probably clean up the UI."
    },
    {
      "createdDate": "2024-12-27T06:43:00.000Z",
      "description": "High school can be overwhelming, but with effective scheduling, personalized learning strategies, and maintaining a balanced life, you can navigate it successfully.",
      "editedDate": "2024-12-27T07:15:00.000Z",
      "id": "169c4188-fa0e-80ad-a19b-e768057804ed",
      "publishedDate": "2019-08-10T23:45:00.000-06:00",
      "slug": "michaels-declassified-school-survival-guide",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "Michael's Declassified School Survival Guide",
      "coverImage": "/blog-files/michaels-declassified-school-survival-guide/cover-mcnally.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on August 10th, 2019.\n\n![My high school!](/blog-files/michaels-declassified-school-survival-guide/000-mcnally.webp)\n\nHigh school is complicated in more ways than one. From Degrassi-esque social drama to life-altering career decisions, it can be seriously difficult to maintain your grades. However, there are some simple tricks to ease the learning process and make your education systematic-that is, without all the overhead of figuring how to do this whole school thing. By following these three tips, you'll surely see a boost in your productivity and an ease in your hectic high school life.\n\nFirst, the schedule. Scheduling is no easy task! But nothing will hinder your high school experience more than not even being able to see what's in front of you. Scheduling has a myriad of benefits, from being able to see hectic exams days in advance, giving yourself free-time, and preventing yourself from double booking. One of the most common high school troubles is when teachers schedule numerous projects and exams for the same day. I like to call this \"the slog.\" The easiest way to get out of the slog is to jump out in front of it. You'll be surprised how receptive teachers are if you let them know early on that you won't be able to turn something in; however, teachers will not hesitate to dock you marks if you let them know the day of. All of this comes from scheduling. The easiest way to get started is to use an app like Google Calendar. This allows you to sync from your phone to your computer, and you can catch overlaps in your schedule as soon as they appear. Once you're comfortable with using Google Calendar, try to set a daily time to determine your schedule for the next day or week. This way, your studying time and project work periods can also be booked before they get away from you.\n\nSecond, the strategy. By high school, you likely have a good sense of what style of learner you are. But don't fret about the often exclaimed learner categories‚Äîbe it \"aural,\" \"visual,\" or \"kinesthetic\"‚Äîthese terms are often too narrow for most students. Instead, work class-by-class. In math, does it help more to do loads of practice or to do just the difficult questions? In English, do you need to spend more time planning, or are you better off working through your ideas as you write? Explicitly outlining these strategies, analogous to you being your own coach, can help you consciously approach your learning. Be flexible with this though! If a strategy is failing, just like a great coach, switch it up. As long as you're sure of yourself, your learning strategy is more likely to succeed.\n\nLast of all, the life. Though it may be tempting at times, when you're bracing for a scholarship and pushing for a spot at your favoured university, never let school trump your personal endeavors. Always maintain the activities you enjoy to ensure both your mental and physical health through the often tumultuous times. Eat three times a day, and try beginning your mornings with protein-heavy breakfasts. Sugar-rich cereals do little to boost your energy throughout the day, but a morning protein boost can give you that crucial edge.\n\nTrying to maintain these three things-the schedule, the strategy, and the life-is the crux of living your best life in high school. First and foremost, put your best foot forward, with these ambitions and motives in the back of your mind, and you'll be sure to thrive throughout high school."
    },
    {
      "createdDate": "2024-12-27T06:45:00.000Z",
      "description": "Discovering my path after high school through the Japanese concept of ikigai, which emphasizes the balance between passion, skills, needs, and financial viability.",
      "editedDate": "2024-12-27T07:15:00.000Z",
      "id": "169c4188-fa0e-8040-9d93-e4897991b171",
      "publishedDate": "2019-05-06T23:49:00.000-06:00",
      "slug": "ikigai",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "Ikigai",
      "coverImage": "/blog-files/ikigai/cover-photo-1636070515198-d7329524e6e3.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on May 6th, 2019.\n\nSome of my readers may know that I recently decided what I'll be doing past high school: studying computer science. This is very exciting as I now feel much more focused and fulfilled. I do find now that it is strange sitting in English classes and the like and trying to stay as motivated as I was. I now know that this subject won't be consequential to my life. However, I still enjoy all of my classes and have loved my school year so far.\n\nSomething I want to touch on in this piece is how I came to that decision. It's a very muggy thing, trying to decide what you're going to do after high school, and there's mounds of questionable advice out there. \"Follow your passion!\" is one quip I hear a lot. This is terrible advice. Your passion alone should not inform what you do, because it might not make sense with a few others things: what you're good at, what the world actually needs, and what you can make money for.\n\nI did a little research, and stumbled across the Japanese concept of ikigai. Of course, I won't explain it perfectly, so I encourage you to check this out on your own, but I'll try my best. Ikigai is a Japanese term for \"a reason for being,\" similar to ‚Äòraison d'etre' and other expressions. In the culture of Okinawa, ikigai is thought of as \"a reason to get up in the morning.\" Seems pretty cool right? So what does it actually look like? Well, I'll start with this venn diagram:\n\n![The Ikigai 4-way venn diagram.](/blog-files/ikigai/000-ikigai.webp)\n\nA four way venn diagram, so maybe not totally clear. Let's try to understanding what's going on. There are four categories, as mentioned. What you love, what you can be paid for, what the world needs, and what you're good at. Each of these intersect to fill different roles in our life: profession, vocation (a side hustle or a \"calling\"), mission, and passion. Now it's clear how passion alone is dangerous: it doesn't factor in money or the world at large. At the center of all of these concepts is harmony: ikigai. There are also cautions surrounding the venn diagram. Let's dissect them.\n\nWithout having what the world needs, we feel \"satisfaction, but a feeling of uselessness.\" In our lives, we need to contribute to something greater, and to feel a higher purpose (regardless of our spirituality). Across from that is where we lack any money behind our work; we have \"delight and fullness, but no wealth.\" Don't get too caught up in money though, there's a minimum you have to maintain to lead a satisfying life, and beyond that money begins to dictate your personality. What that baseline is varies from person-to-person, but try to determine what life you want to lead, and this can inform your salary goals. On the bottom right it reads, \"excitement and complacency, but sense of uncertainty.\" In this example, we haven't taken advantage of our skills. This would create a similar apathy and sadness, as we feel we could achieve something greater. Lastly, to the left from there, it reads: \"comfortable, but a feeling of emptiness.\" We need to have work that we love, otherwise, we dive deep into our work. Your life's achievements need to have a personal element to them to bring you joy!\n\nSo, there you have it: ikigai. A tangible way to think about what you want to do with your life. There are no wrong answers with ikigai, and if you ever feel you are missing something, you're never at a dead end. There are always chances to pick up a new hobby, work with a new organization, or challenge yourself somehow.\n\nOh, and how did I use ikigai to decide my major? I focussed on the intersection between what I was good at, and what I could be paid for. The world needs a lot of things, and there are lots of bright people working towards those things in their careers, so I didn't want that to necessarily inform my major. I'll put a pause on world domination for now. Moreover, I'm the type that loves virtually all of my work, so I didn't find that helpful in deciding. So, I had narrowed it down to what made money. Countless jobs have a salary I would be more than happy with. Some that stuck out included work in academia, STEM-centered jobs, potentially even law. Then I thought about what I was good at. I'm pretty flexible, but at more core I have a few main talents: math, problem-solving, and communicating. Well, a job that fuses that quite well is in computer science, where problems must be solved and presented to consumers!\n\nIf you have any questions about ikigai, you're always welcome to reach out at [~~me@michaeldemar.co~~](mailto:me@michaeldemar.co) michaelfromyeg [at] gmail [dot] com. I also encourage you to check out [this](https://forastateofhappiness.com/ikigai-the-happiness-of-always-being-busy-in-japan) article."
    },
    {
      "createdDate": "2024-12-27T07:07:00.000Z",
      "description": "Discover ten captivating newsletters that will transform your inbox into a source of knowledge and inspiration.",
      "editedDate": "2024-12-27T07:13:00.000Z",
      "id": "169c4188-fa0e-80d7-bb7c-d5e7ef53f546",
      "publishedDate": "2019-03-05T00:09:00.000-07:00",
      "slug": "10-newsletters-to-make-your-inbox-more-interesting",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "10 newsletters to make your inbox more interesting",
      "coverImage": "/blog-files/10-newsletters-to-make-your-inbox-more-interesting/cover-newsletters.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on March 5th, 2019.\n\n![Newsletters!](/blog-files/10-newsletters-to-make-your-inbox-more-interesting/000-newsletters.webp)\n\nI have an addiction to e-mail newsletters. So I thought I'd put it to good use and share some of my favorites. Here are ten newsletters to brighten up your dreary inbox.\n\n[The Daily Pnut](https://dailypnut.com/)‚Ä¶ _The best newsletter, hands down_\n\nThe Daily Pnut describes itself as a newsletter about world affairs that will \"make you sound marginally more intelligent.\" It's my all-time favorite newsletter. With gripping and poignant articles about current events with a (refreshing) non-American lens, The Daily Pnut captures our rapidly changing world in an enjoyable, daily newsletter. It's a must-subscribe.\n\n[Morning Brew](https://morningbrew.com/)‚Ä¶ _Business news I can actually tolerate_\n\nBringing you the latest from \"Wall Street to Silicon Valley,\" the Morning Brew is a great financial newsletter for people less knowledgeable on the jargon, but still curious. It's consistently entertaining and lively. If you're interested in the financial world, the Morning Brew is a great way to stay in-the-know.\n\n[Vox Sentences](https://vox.com/vox-sentences)‚Ä¶ _The news, but shorter_\n\nConsuming one news source makes you biased, so why not consume them all? Vox Sentences combines snippets from a variety of organizations (though, you'd be hard-pressed to find a Fox quote), and places them together to create short pieces on current events. Always informative and covers pressing issues.\n\n[Farnam Street](https://fs.blog/)‚Ä¶ _Brain Food newsletter_\n\nFarnam Street's \"Brain Food\" newsletter covers a variety of mental models and ways of thinking about the world. For lack of a better term, it's damn cool.\n\n[BetterExplained](https://betterexplained.com/)‚Ä¶ _Math explained better_\n\nBetter Explained's monthly newsletter showcases articles from their blog which take difficult concepts from mathematics, economics, and other fields and creates intuitive ways of understanding them. Through analogies and no-brainer explanations, this blog makes even the most rigorous calculus concept comprehensible.\n\n[The Ann Friedman Weekly](https://annfriedman.com/)‚Ä¶ _Personal lens_\n\nIn this weekly newsletter Ann Friedman shares what she's been reading, and where she's at in life. It's uniquely personal lens makes this newsletter consistently interesting.\n\n[Noticing](https://kottke.org/newsletter)‚Ä¶ _Interesting nuggets from around the web_\n\nNoticing collects cool and quirky nuggets of information from around the web. It's the StumbleUpon of newsletters. I love it.\n\n[Wait But Why](https://waitbutwhy.com/)‚Ä¶ _Asking the real questions_\n\nA thought-provoking newsletter exploring the bigger questions, with stick figures. Because, how else would you figure out the meaning of life?\n\n[Brain Pickings](https://brainpickings.org/)‚Ä¶ _Scratch your noggin' with these reads_\n\nAgain, essentially just a mish mash of really cool stuff. This newsletter is particularly beautifully written as well. Its eloquence only makes it more enticing.\n\n[Exponential View](https://exponentialview.co/)‚Ä¶ _A nod to what's next_\n\nWith a specifically-futurist lens, Exponential View takes a glimpse into what the next few decades will hold. (However good or not they may be.)"
    },
    {
      "createdDate": "2024-12-27T06:30:00.000Z",
      "description": "Dive into my first hackathon experience at HackED 2019, where I learned, collaborated, and networked while coding a vintage Java application in just 24 hours!",
      "editedDate": "2024-12-28T00:06:00.000Z",
      "id": "169c4188-fa0e-80ba-b8f9-ee3d17f3a300",
      "publishedDate": "2017-07-01T23:35:00.000-06:00",
      "slug": "all-about-hackathons",
      "status": "Published",
      "tags": [
        "Blog",
        "Technical"
      ],
      "title": "All about hackathons",
      "coverImage": "/blog-files/all-about-hackathons/cover-hackathon.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 1st, 2017.\n\n![Hacking away at nwPlus 2019.](/blog-files/all-about-hackathons/000-hackathon.webp)\n\nLast weekend, I participated in my first ever hackathon. HackED 2019 is put on by the Computer Engineering Club at the University of Alberta, and follows a similar format to most hackathons. First, there was an opening ceremony to introduce various sponsors, prizes, and relevant information to the competition. Then, we were released into the wild for twenty-four straight hours to produce a piece of software that did a cool thing. And finally, after all was said and done, us bleary-eyed programmers faced the judges and showed off our product.\n\n_Michael from the future here! We created this very vintage Java application for tracking student grades. If you're bored, feel free to poke around the repository_ [_here_](https://github.com/michaelfromyeg/student-gradebook)_. It was my first interaction with Java, Swing, and OOP on a sizeable project._\n\nSo that's the gist: 24 hours, code something cool, try to win. Let's cut to the chase: why should you do it?\n\nFirst reason: to learn. Hackathons are a great place to get started with programming. This was a bit of a surprise to me‚Äîmany people at a hackathon go out of their way to learn a new technology with their project. At HackED 2019, my friends and I built something in Java, and we were all somewhat familiar. However, most decide to branch out and spend the twenty-four hours learning as much as they code. And it works. Because odds are, at a hacking conference with many, many hackers, someone else is probably already familiar with what you're struggling with. So one call-for-help and bam, the support is there. There is no better place to jump into a new programming language than a hackathon.\n\nSecond reason: to collaborate. Especially as a high school student, we don't often have to code together. We write projects, submit them to our instructor, rinse and repeat. When you work at a hackathon, you have to collaborate on code with your peers. For students of code who are new to this, using Git can having interesting results. Thankfully, at HackED there was a Git workshop so it wasn't a total bust. But having to do it first-hand with your friends is the best way to learn, plain and simple. And if you plan to work on any open source projects, it's a need-to-know skill.\n\nThird reason: to network. There are so many bright, eager minds at these events with people interested in everything from Raspberry Pi to Flask to R, etc. You can learn so much just by striking up a simple conversation. At HackED, I learned a ton about post-secondary options, job options for computer scientists in Edmonton, and more. Hackathons are a great way to meet other folks in the industry.\n\nAll in all, go to a hackathon! You won't regret it. Your programming skills will thank you later.\n\nAs a bonus, here are a couple screenshots of what we built at HackED 2019.\n\n![homepage.png](/blog-files/all-about-hackathons/002-homepage.webp)\n\n![4c5e05e6-a4d6-45c0-bb79-80be3184ced6.png](/blog-files/all-about-hackathons/003-4c5e05e6-a4d6-45c0-bb79-80be3184ced6.webp)\n\n![fc0071fa-fa08-45e6-9881-357275cf772f.png](/blog-files/all-about-hackathons/004-fc0071fa-fa08-45e6-9881-357275cf772f.webp)"
    }
  ],
  "postsBySlug": {
    "so-you-want-to-be-a-computer-scientist": {
      "createdDate": "2024-12-24T22:43:00.000Z",
      "description": "A practical guide for aspiring computer scientists, emphasizing hands-on learning through projects and community engagement.",
      "editedDate": "2024-12-30T19:45:00.000Z",
      "id": "166c4188-fa0e-80e2-830b-d87d99d95caf",
      "publishedDate": "2024-12-30T11:24:00.000-07:00",
      "slug": "so-you-want-to-be-a-computer-scientist",
      "status": "Published",
      "tags": [
        "Guides",
        "Technical"
      ],
      "title": "So you want to be a computer scientist?",
      "coverImage": "/blog-files/so-you-want-to-be-a-computer-scientist/cover-photo-1681171575028-16aa7a6f063e.webp",
      "content": "If I got hit by a bus and forgot everything I knew about computer science [1], here is how‚Äôd I re-learn it [2].\n\n_Inspired by Robert Heaton‚Äôs ‚ÄúProjects for Advanced Beginners‚Äù (_[_link_](https://robertheaton.com/2018/12/08/programming-projects-for-advanced-beginners/)_) and a bunch of random knowledge I‚Äôve accumulated over time._\n\n> ‚ÄºÔ∏è Are you already someone with knowledge in the field of computer science, and looking for resources or opportunities? I encourage you to look at [Untitled](https://www.notion.so/12cc4188fa0e80808d8af63672a59269) instead. This is my curated list of every-resource-ever I considered in undergrad, and has suggestions for wannabe engineers, PMs, VCs, etc.\n\nLet‚Äôs get to it.\n\nFirst: the number one thing to understand is **‚Äòcoding‚Äô is something you learn by doing.** There is a lot of theoretical stuff to know (‚Äîwhose importance varies with your goals), but fundamentally you need to code. A lot.\n\nSo, let‚Äôs ‚Äúlearn by doing.‚Äù To give that some structure, your curriculum will come as a curated list of projects. This will be supplemented by things to read or look at when you get board. And then some philosophical advice how to have your projects be more than a tree that falls in the forest.\n\nFirst, some principles.\n\n\n## Principles\n\n\n1. Digital assistants (Claude, ChatGPT) are good, but you can only use them like a university TA. That is, they cannot write code for you, you cannot copy text from them, etc., but you can (and should) ask them explanatory questions.\n\n\t‚úÖ ‚ÄúWhat does this bit of code do?‚Äù ‚ÄúAny hints for what‚Äôs wrong with my approach to this problem? DO NOT OUTPUT THE ANSWER. (problem) (approach)‚Äù\n\n\t‚õî ‚ÄúWrite a webpage skeleton for me,‚Äù ‚Äúoutput a function to reverse a linked list in Python‚Äù\n\t\n\tYou should use digital assistants (‚Ä¶you have a literal TA available at your disposal 24/7), but you must use them correctly. Discipline is key!\n\n2. You also must disable any code ‚Äúcomplete‚Äù tools (i.e., anything that writes code for you in a text editor).\n\n\tImagine learning to bike but never being able to take off the training wheels. Would you ever be able to do cool shit, like a wheelie?\n\n\tFor example, if you use Visual Studio Code, add this in your editor.\n\n\t```javascript\n\t// at .vscode/settings.json\n\t{\n\t  // ...\n\t  \"github.copilot.enable\": {\n\t    \"*\": false\n\t  }\n\t}\n\t```\n\n3. You journey must be in public. Once you finish a project, deploy it to a URL, post it on LinkedIn, Twitter, etc., send it to your friends, your mom, your dog, etc. Get people to use it, give you feedback, and fix their bugs. (This will pay off dividends down the line.)\n\nNeed a community of people to do this with? Look at [Summer of Shipping](https://summerofshipping.com/), various sub-reddits (e.g., r/dailyprogrammer), or Discord communities.\n4. Have fun!\n\n\n## Curriculum\n\n\nYour first task will be to build a website. Not using like, Framer, or Bubble, or even Notion, but with HTML (‚ÄùHyperText Markup Language‚Äù for page structure and content) and CSS (‚ÄùCascading Style Sheets‚Äù, for style).\n\nWhy a website? This will serve as your digital playground. You‚Äôll build it, then re-build it, then re-build it again, and again, and again. Each iteration will represent a new milestone in your learning. Each feature will be a test of your knowledge.\n\n‚ÄúBut Michael,‚Äù you say, ‚ÄúI have no interest in being a web programmer!‚Äù Good. You still need a website for sharing your work. And basically every project you make can (and should) be hosted or have an entrypoint on your website. (Think a ‚Äúdownload‚Äù link for your desktop app, or a landing page for your mobile game.) In addition, a lot of frameworks support cross-platform development today, so you might be able to accidentally be good at web programming. Which is also good.\n\nHere are some resources you can use to get you unstuck.\n\n\n- [Khan Academy](https://www.khanacademy.org/) (very basic, just to get you started‚Äîwatch a few videos, they have a nice online playground)\n- [MDN‚Äôs web docs](https://developer.mozilla.org/en-US/docs/Learn_web_development) ‚Üê this is the one you‚Äôll actually use to make your site. Read everything on here like a sponge. Do ‚Äú[Your first website](https://developer.mozilla.org/en-US/docs/Learn_web_development/Getting_started/Your_first_website).‚Äù\n\n- [Frontend Masters](https://frontendmasters.com/) (more advanced, as you start to want to do fancier things with your site)\n\nIf you finish your website, I know you‚Äôre serious. Exciting! Go to [GitHub.com](https://github.com/) and make an account. Create a ‚Äúrepository‚Äù and upload your code there.\n\nStill a student? Skim through [these resources](https://education.github.com/pack) and see if anything looks interesting. (For example, you can get 6 months free to [Frontend Masters](/166c4188fa0e80e2830bd87d99d95caf#167c4188fa0e804b9369d8262f19dbfe)!)\n\n\n---\n\nNext, I‚Äôm going to hijack your social media feeds. Subscribe to all these people.\n\n\n- [The Coding Train](https://www.youtube.com/@TheCodingTrain), 11/10 programming tutorials‚Äîsort by popular\n- [Fireship](https://www.youtube.com/@Fireship), light educational content and tech culture\n\n- [Computerphile](https://www.youtube.com/@Computerphile), fun, advanced content\n- [3Blue1Brown](https://www.youtube.com/@3blue1brown), math and computer science\n\n- (‚Ä¶more to come as I think of them‚Ä¶)\n\nThis is a very passive way to supplement your learning. Hijacking my social media (with gym bros instead of computer scientists) helped a surprising amount when I started going to the gym.\n\n\n---\n\nOK, next, you‚Äôre going to work through some practice problems to learn a language a bit harder than HTML and CSS. (Practice?!)\n\n[Timeless clip.](https://www.youtube.com/watch?v=eGDBR2L5kzI)\n\nYour choices are **JavaScript** or **Python.**\n\n![Other languages are good too‚Ä¶ but later. Credit: me.](/blog-files/so-you-want-to-be-a-computer-scientist/014-image.webp)\n\n\n- [~~Practice-It~~](https://practiceit.cs.washington.edu/) ‚Üí [CodeStepByStep](https://codestepbystep.com/) (do this first)\n\t- (I‚Äôm working on getting an instructor code. Once I do that I‚Äôll add it here.)\n\t- For now, [CodingBat](https://codingbat.com/python) is a good beginner introduction. Then look at Codeacademy‚Äôs courses.\n\n- [Advent of Code](https://adventofcode.com/) (do this every Christmas; work through as many days as you can)\n- [Grind 75](https://www.techinterviewhandbook.org/grind75/) (once you need a job, becomes especially relevant)\n\nPick a few problems a day, as many as you can muster. They‚Äôll be boring at first, but quickly get interesting. This will help ease you into language ‚Äúsyntax‚Äù (i.e., how to ‚Äòspeak‚Äô it).\n\nConsistent practice is key! Even a minute can be enough, just to give you continual exposure.\n\n![Forgive the corny meme, but it‚Äôs true. Credit: LinkedIn.](/blog-files/so-you-want-to-be-a-computer-scientist/020-62e58670-00f8-41e5-812b-65566013b8a5.webp)\n\nThis learn-by-doing approach sometimes hits a roadblock. Here are some resources for either language to help aid your learning.\n\n\n**JavaScript**\n\n\n- [Eloquent JavaScript](https://eloquentjavascript.net/)\n- [You Don't Know JS](https://kbpsystem777.github.io/You-Dont-Know-JS/)\n\n\n**Python**\n\n\n- [Automate the Boring Stuff with Python](https://automatetheboringstuff.com/)\n- [Corey Schafer's YouTube channel](https://www.youtube.com/@coreyms)\n\nHere‚Äôs a kind-of checklist to note down your progress.\n\n\n- [ ] Run a program, output to the screen (`print`, `console.log`)\n- [ ] Store information in variables (`x = 5`)\n\n- [ ] Do basic math\n- [ ] Work with text (‚Äùstrings‚Äù), do basic operations over strings\n\n- [ ] Write logic with if-(this-else-that)-statements (some people call this ‚Äúcontrol flow‚Äù)\n- [ ] Use lists to store multiple items (`[‚Äùhello‚Äù, ‚Äúworld‚Äù]`)\n\n- [ ] Write logic with loops (each `for <N times>: print(\"hello\")`)\n- [ ] Create functions to organize and name your code\n\n- [ ] Read and write to files (text files, CSV files‚Äîi.e., a spreadsheet)\n- [ ] Get input from users\n\n- [ ] Handle basic errors; learn what an ‚Äúexception‚Äù is\n- [ ] Install a use packages from the üåê internet üåê\n\n- [ ] Organize your code into multiple files\n\nOkay, enough reading (talk about boring). It‚Äôs time to get back on the project train.\n\n\n## Projects\n\n\nHere is a list of projects. Some advice:\n\n\n- Make these projects your _own;_ I‚Äôve intentionally left them rather underspecified, so use your creative freedom. Have fun!\n- Every time you finish: (1) make sure it‚Äôs on GitHub, (2) deploy it to a URL, and (3) share that URL everywhere you can think of.\n\t- As a bonus, if you know someone who‚Äôs ‚Äúnice with computers‚Äù‚Äîhave them review your code and give you feedback.\n\n- Don‚Äôt spend too long on any of these.\n- (Also another bonus tip: it‚Äôs okay to implement a kind-of dumb feature if it lets you practice a code coding language feature you learned. It‚Äôs about practice.)\n\nIf any of these bore you, skip ‚Äòem. Again, it‚Äôs about _your_ learning. (I think they‚Äôre fun though.)\n\n\n### Hangman\n\n\nImplement the game of Hangman using your language of choice. The way it should play is‚Ä¶\n\n1. Press ‚Äústart‚Äù\n2. Have an input to either guess a letter, or guess the entire word\n\t1. If the player guesses a letter, either\n\t\t1. Mark off where that letter is\n\t\t2. Or add a body part\n\t2. If the player guesses a word, either\n\t\t1. They won!\n\t\t2. They lost :(\n3. Repeat (2) until they either win, lose, or finish the body parts\n\nThe generate text output, you can Google for Hangman ‚ÄúASCII‚Äù art.\n\nAs an extension: make a mode for two players, where one player can choose a word and mark off the appropriate letter positions.\n\n![Hangman, mid-game. Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/025-Hangman_example.svg.webp)\n\n\n### Conway‚Äôs Game of Life\n\n\nIt‚Äôs not really much of a game, more like an art piece. Here‚Äôs the description.\n\n> The Game of Life, also known as Conway's Game of Life or simply Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input.\n\nYou start with a 2D grid of squares, either filled or empty. You determine the next game state via the following rules.\n\n```text\n1. Any live cell with fewer than two live neighbours dies, as if by underpopulation.\n2. Any live cell with two or three live neighbours lives on to the next generation.\n3. Any live cell with more than three live neighbours dies, as if by overpopulation.\n4. Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n```\n\nYour game will consist of code to render the grid, and code to determine the next grid state.\n\nAs an extension exercise, try figuring out interesting starting positions for yourself!\n\n![Is this life? Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/026-Gospers_glider_gun.webp)\n\n\n### Tic-Tac-Toe\n\n\nNow that you have some experience with more interesting game states, let‚Äôs try tic-tac-toe.\n\nThe game should support keeping track who‚Äôs winning (player 1, or player 2) after multiple rounds. It‚Äôd also be cool to be able to track the game‚Äôs history, and jump back in time (‚Äúundo‚Äù).\n\n![Tic-tac-toe. Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/027-Tic_tac_toe.svg.webp)\n\n\n### Snake\n\n\nLast but not least: snake!\n\nImplement the classic game in your terminal. Make sure the user dies if they hit themselves, or hit the wall. \n\nAs an extension: implement a Tron version with two playable snakes.\n\n![Snake! Credit: Wikipedia.](/blog-files/so-you-want-to-be-a-computer-scientist/028-Snake_can_be_completed.webp)\n\n\n---\n\nüõë STOP! üõë We must take a non-coding interlude. This is the point at which you can create a very basic resume, that lists out the few projects you have here. But you‚Äôre not allowed to do it in Word! Oh no‚Äîwe use much more annoying tools in this discipline.\n\nGo to a website called [Overleaf](/166c4188fa0e80e2830bd87d99d95caf). Google ‚ÄúOverleaf latex resume templates‚Äù and scroll through to you find one that (a) you like and (b) meets these strict requirements:\n\n1. Single column.\n2. Has the following sections: experience (or equivalent), education (or equivalent), projects (or equivalent).\n3. Does not have: a profile photo, an ‚Äúabout‚Äù or ‚Äúobjective‚Äù section.\n\nThen, edit the template to match your content. LaTeX (the language you‚Äôre now looking at, after forking the template), is a bit trickier than HTML, but a similar kind of mark-up language. I‚Äôll make an exception to my [Principles](/166c4188fa0e80e2830bd87d99d95caf) for a brief moment: you can get ChatGPT (or equivalent) to help you as much as you like with this one. LaTeX is not something you‚Äôll need on a job, but is good for writing very nice docs (and just is something you should know).\n\n\n---\n\nAlright.. back to some ‚ú® more advanced ‚ú® projects.\n\n\n### Digital Analog Clock\n\n\nFor this one, you‚Äôre going to make a analog clock, by digital means.\n\nYour end picture is going to look something like this.\n\n![A analog clock program. Credit: the Processing website.](/blog-files/so-you-want-to-be-a-computer-scientist/029-image.webp)\n\n(‚Ä¶with the hands actually moving.)\n\nTo do it with JavaScript, I recommend using Processing.js.\n\nTo do with Python, I recommend using Pygame.\n\nYou can compute a lot of stuff manually, but this is a first example of where a little bit of math will go a _long_ way to simplifying your code. Time to pull out that high school trigonometry knowledge!\n\n\n### Blog\n\n\nIt‚Äôs been a while since we‚Äôve taken a look at your website. Your next project will be to add a blog! It‚Äôs okay if you don‚Äôt write (‚Ä¶but you should!); this is just a good way to extend your web development skills.\n\nTo make the blog, create a folder on your website that has a series of Markdown files. Markdown is sort-of like a stripped down HTML, useful for writing documents. Your website should take those files and ‚Äòturn them‚Äô into a series of web pages‚Äîthis technique is usually called ‚Äòstatic site generation‚Äô (_static_ because it happens at build time; not dynamic since you can‚Äôt update the blog post in real-time).\n\nYou'll almost certainly need JavaScript to do this, though there are options for Python (look-up Pelican). For JavaScript, you have many options: considering learning React.js (and it's ‚Äúcousin‚Äù Next.js).\n\nYou can also choose frameworks in other languages, like Hugo (which uses Go). Your options are plentiful here! Feel free to do some exploring yourself. (It's your website!)\n\nAs an extension: try hosting other kinds of content from your website (e.g., a photography portfolio).\n\n\n### AI-Kinator\n\n\nAI is all the rage now. But did you know using ChatGPT via code is as easy as this?\n\n```python\nimport openai\n\nopenai.api_key = 'your-api-key-here'\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[{\"role\": \"user\", \"content\": \"What is the capital of France?\"}]\n)\nprint(response.choices[0].message.content)\n```\n\nAn API key should always be kept private. It is your secret key for accessing a (usually) paid or private service. \n\nGo get one for ChatGPT from [here](https://platform.openai.com/). Add a tiny bit of money to your account (I think $5 is the minimum).\n\nNow we‚Äôre going to re-make our own version of the [Akinator](https://en.akinator.com/). Except for yours, you‚Äôll use ChatGPT as the all knowing Ak. You‚Äôll have to do quite a bit of Googling to figure out how to use the API effectively, but the core idea is quite simple. Prompt is to ask you questions to guess the person you‚Äôre thinking of, in a loop up to 20 guesses.\n\n\n### Text Omegle\n\n\nOmegle was a video chat mired in controversy. It got shut down recently by its creator.\n\nYour final project will be to make a non-video version! The app should work as follows:\n\n\n- A welcome screen where users can put in a keyword\n- If someone else has put in the same keyword, they‚Äôre placed in a room\n\n- They can chat, until either user disconnects\n\nExtension work can include giving either user a bit beefier of a profile (e.g., a profile picture, bio), and smarter matching for non-exact-but-kind-of-matches (e.g., ‚Äúamerican football‚Äù, and ‚Äúfootball‚Äù). \n\n\n---\n\nFinally, here are some fun extensions to take depending on your interests.\n\nInterested in **data science or machine learning?** You may want to beef up your math foundations a bit. Khan Academy, MIT OpenCourseWare, etc., have a ton of machine learning offerings. Kaggle is also a good resource for getting real-world experience.\n\nInterested in **game programming?** Make games! World‚Äôs your oyster here. We‚Äôve mostly done 2D stuff, but you can install Unity and venture in 3D programming. Gamejam‚Äôs are a good way to build your skills quickly.\n\nInterested in **web development?** The ‚Äúclassic‚Äù web dev next project would be a todo list. If you didn‚Äôt already, learn some JavaScript and then tack on a framework like React. [React‚Äôs tutorial](https://react.dev/) is a great starting place. You should also get Frontend Masters. \n\n\n---\n\nAt this point, if you‚Äôve really stuck to the plan, you‚Äôre ready to move on from this guide. Here are some resources to continue along your journey.\n\n\n- [roadmap.sh](https://roadmap.sh/), a collection of developer roadmaps (i.e., career path ‚Üî learning track)‚Äîvery helpful!\n- Learn math ‚Üí Khan Academy, Numberphile, 3Blue1Brown, MIT OpenCourseWare‚Äôs stuff, Aelph‚Äôs guide (to get advanced)\n\n- Learn computer science theory ‚Üí Computerphile, 3Blue1Brown, MIT OpenCourseWare‚Äôs stuff (to build up a make shift degree)\n- Get a job ‚Üí [Untitled](https://www.notion.so/12cc4188fa0e80808d8af63672a59269), the other doc of mine that I send people a lot, which is a compilation of resources for levelling up in industry\n\n\n**Remember: the only way to get better is to keep programming.**\n\nThanks for reading! Find this valuable? Hate this guide? Have a funny joke you‚Äôd like to tell me? Feel free to drop a line at michaelfromyeg [at] gmail [dot] com.\n\n\n## Footnotes\n\n\n[1] Doesn‚Äôt that sound nice.\n\n[2] Oh god."
    },
    "makefiles": {
      "createdDate": "2024-12-27T23:56:00.000Z",
      "description": "A comprehensive and accessible guide to using Makefiles for efficient program compilation and management, tailored for students and developers alike.",
      "editedDate": "2024-12-30T18:23:00.000Z",
      "id": "169c4188-fa0e-8003-a494-dace58eb9112",
      "publishedDate": "2024-12-28T18:58:00.000-07:00",
      "slug": "makefiles",
      "status": "Published",
      "tags": [
        "Guides",
        "Technical"
      ],
      "title": "Makefiles",
      "coverImage": "/blog-files/makefiles/cover-gnu-make.webp",
      "content": "A brief guide to GNU's `make`. ~~Check it out~~ [~~here~~](https://michaelfromyeg.github.io/makefiles)~~!~~ It‚Äôs since been migrated here!\n\n![The goat.](/blog-files/makefiles/001-gnu-make.webp)\n\nI used to use `make` often in small-to-medium sized code snippets in CPSC 213 (\"Introduction to Computer Systems\") at UBC as a part of the teaching team. Hopefully this guide can serve students well and provide some clarity on this somewhat arcane build tool!\n\n\n# Makefiles üêê\n\n\nA guide to Makefiles. Designed to be useful for students I taught at the University of British Columbia (UBC), but also hopefully more broadly applicable to other developers. (I've read a lot of Makefile tutorials, and most of them are a bit confusing. So, hopefully this rendition is a bit clearly for undergraduates.) The content here is mostly just a more accessible version of [Chapter 2 of the ](https://www.gnu.org/software/make/manual/make.html#toc-An-Introduction-to-Makefiles)[`make`](https://www.gnu.org/software/make/manual/make.html#toc-An-Introduction-to-Makefiles)[ manual](https://www.gnu.org/software/make/manual/make.html#toc-An-Introduction-to-Makefiles), \"An Introduction to Makefiles,\" with some extra tidbits here and there.\n\nNow, without further ado,\n\n\n## Motivations\n\n\n`make` is a command line program that, in tandem with a `Makefile`, allows one to 'compile' and 'link' small, medium, and large programs. If you've ever compiled a program, like\n\n`gcc main.c -o main; ./main`\n\nor perhaps\n\n`javac Main.java; java -cp . Main`\n\nor even\n\n`clang++ main.cpp -o main; ./main`\n\nyou'll benefit from `make`. `make` can be used to add \"shortcuts\" for various common commands as well, such as cleaning up undesired files from your project. It also _only recompiles what is necessary_ which, while never particularly relevant for assignments consisting of less than 1,000 lines of code, becomes extraordinarily relevant in codebases of 1,000,000+ lines.\n\n\n## Makefile Basics\n\n\nFirstly, make sure you have `make` actually installed. Note this is not the same thing as `cmake`. (I'm not proud to admit it, but I thought these were equivalents for a very long time.) You should also have `gcc` working (and ideally some kind of Java installed). Again, new-to-C Windows users might have issues here; I recommend using [Chocolatey](https://chocolatey.org/) to fix those issues (or better yet, WSL).\n\n> Aside: cmake is a meta-make (that is, like make for make). It builds makefiles for various systems simultaneously. It has 'profiles' for different compilers and systems, and will automatically generate the correct flags, et cetera, on the fly. In short, it's for huge projects, and I won't be covering it in this guide.\n\nTo check if you have `make` installed, run `make --version`. I see `GNU Make 4.2.1 [...]` on my machine. If you see an error like,\n\n> \"'make' is not recognized as an internal or external command, operable program or batch file\" (from PowerShell, on Windows.)\n\nor\n\n> \"make\": command not found (from Linux, I believe.)\n\nyou need to install the software. Follow [these](https://www.gnu.org/software/make/) steps; on Windows, `choco` is your friend here.\n\nTry running `make` with no arguments. You should see the following.\n\n```text\n$ make\n> make: *** No targets specified and no makefile found.  Stop.\n```\n\n`make` is looking for a corresponding `Makefile` and didn't find one. Let's start by creating one!\n\nMakefiles are essential a set of different commands or \"rules.\" They have **no** file extension, and are just written in plaintext. Each rule has roughly the following structure.\n\n```text\ntarget ...: prerequisites ...\n    recipe\n    ...\n```\n\nThe **target** is the name of the file generated by the program. A **prerequisite** is dependency for the target, which should be another target itself. The **recipe** is the actual set of actions carried out. The target and recipe are required, but prerequisites are of course optional.\n\n\n**WARNING**: Makefiles are picky about spacing, like Python. Each line in a recipe must be prefixed by a `TAB` character. Four spaces don't work; it really needs to be tabs. Just a note.\n\nLet's go back to the basic `gcc main.c -o main` we all know and love. If you check out `examples/basic`, we can see what this looks like in a Makefile. Begin by trying\n\n```text\n$ gcc main.c -o main; ./main\n> H3llo, w0rld!\n```\n\nwhich works as normal. Now run\n\n```text\n$ make; ./main\n> H3llo, w0rld!\n```\n\nour first Makefile! And it's really just one line:\n\n```text\nmain: main.c\n```\n\nkind-of cool isn't it? Though it's a bit unorthodox, we could even do this for a Java file. Running the `examples/java` file in VS Code gave some horrible command like\n\n```text\n$ /usr/bin/env /home/mdema/.sdkman/candidates/java/current/bin/java \\\\\n    --enable-preview \\\\\n    -XX:+ShowCodeDetailsInExceptionMessages \\\\\n    -Dfile.encoding=UTF-8 \\\\\n    -cp /home/mdema/.vscode-server/data/[...]/bin \\\\\n    examples.java.Main\n> Hello, world\n```\n\nImagine trying to memorize that! Instead, try\n\n```text\n$ make\n> Hello, world!\n```\n\n(Forgive the `cd`s in the Makefile; this is just for demonstration.) Clearly, `make` _can_ be used to run any set of commands. Rules are at their core, just a set of instructions, a \"recipe\", that are just commands you would've had to run by hand in the shell.\n\n\n## More on Makefiles\n\n\nOftentimes, our programs are not just single files. What if we want to compile a bunch of `.c` files and `.h` files into a single executable? This is where object files (`.o`) can truly benefit us. We can create rules to construct intermediate `.o` files, and then create a \"master\" rule that combines (or better yet, links) a bunch of these object files together.\n\nIn sum, the template is something like this\n\n```text\nmain: something.o something_else.o something_else_other.o\n    gcc -o main something.o \\\\\n      something_else.o \\\\\n      something_else_other.o\n\nsomething.o: something.c something.h defs.h\n    gcc -c something.c\n\nsomething_else.o: something_else.c defs.h\n    gcc -c something_else.c\n\nsomething_else_other.o: something_else_other.c constants.h defs.h\n    gcc -c something_else_other.c\n```\n\nTo create `main`, you would type `make` (or `make main`). Notice how `main` is just that, and not suffixed with a `.o`. We also use `-o` instead of `-c` to create an object file instead of an object file. This example nicely demonstrates the importance of prerequisites; if we edit `constants.h`, recompiling main will only recompile `something_else_other.o` before linkage, saving some computation time.\n\nThe first rule given is used by default, so it should be the \"main\" goal or executable produced by your program.\n\n> A few asides from the above example. Firstly, note that make itself is not picky about what goes in a recipe, and it's your task as the programmer to devise a recipe that really works. Second, gcc is the GNU C compiler; you can see a brief guide to different compilers here. cc is a more generally applicable option.\n\nIt can be a bit tedious re-writing all these file names. Instead, it's common practice to throw them into a variable. The above example becomes.\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\n\n# etc.\n\n```\n\nYou'll also notice that we're manually stating `gcc -o main ...` in each of these, but we did not do that in our basic example. In fact, `make` has an implicit rule to use `cc -c` to compile object files from `.c` files. It's pretty nifty. Likewise, `make` also allows us to skip adding the `.c` file itself to its object file prerequisite. The above example simplifies to\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\nsomething.o: something.h defs.h\nsomething_else.o: defs.h\nsomething_else_other.o: constants.h defs.h\n```\n\nNotice how `defs.h` is a pre-requisite to all of our object files? There's more room for improvement here. We can group entries by their pre-requisites instead. This yields\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\n$(OBJECTS): defs.h\nsomething.o: something.h\nsomething_else_other.o: constants.h\n```\n\nLast thing before we wrap up‚Äîrunning these commands will leave a lot of unwanted files hanging around. To fix this, let's add a \"phony\" command called `clean` that will delete junk files. The reason it is called \"phony\" is that we don't have a file `clean.c`, but rather we're looking to just automate some command line task.\n\nWe get\n\n```text\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    gcc -o main $(OBJECTS)\n\n$(OBJECTS): defs.h\nsomething.o: something.h\nsomething_else_other.o: constants.h\n\n.PHONY: clean\n\nclean:\n    rm main $(OBJECTS)\n```\n\n\n## Fancy Makefiles\n\n\nWhat if we want to add some command line options to our `gcc` call? For example, running `gcc main.c -std=gnu11 -Wall -o main`? To do this, we just parameterize the `gcc` part of a recipe. Continuing our earlier example,\n\n```text\nCC = gcc\nCFLAGS = -I . -std=gnu11 -Wall\n\nOBJECTS = something.o something_else.o something_else_other.o\n\nmain: $(OBJECTS)\n    $(CC) -o main $(OBJECTS)\n\n\n# etc\n\n```\n\nNotice that we must specify the `$(CC)` and the `CFLAGS` is added automatically by the compiler.\n\nRemember the earlier example where we wanted to pull out `defs.h` from each of our pre-requisites? There's a different, arguably better way of doing this that involves using macros. We can also create \"generic\" rules that apply to globs (e.g., all `*.c` files). This example demonstrates this\n\n```text\nCC = gcc\nCFLAGS = -I . -std=gnu11 -Wall\n\nOBJECTS = something.o something_else.o something_else_other.o\nDEPS = defs.h\n\n%.o: %.c $(DEPS)\n    $(CC) -c $(CFLAGS)\n\nmain: $(OBJECTS)\n    $(CC) -o main $(OBJECTS)\n\n\n# etc.\n\n```\n\nThis fancy `%.o` rule says all object files depend on their respective `.c` file along with all of the `DEPS`.\n\nFor a final step, let's add directories. What if our `.h` files are in an `include/` directory, our source code lives in a `src/` folder, we have local libraries in a `lib/` folder, and we want to stuff our object files into an output directory. Here's what that would look like.\n\n```text\nIDIR = ../include\nODIR = obj\nLDIR = ../lib\n\nCC = gcc\nCFLAGS = -I $(IDIR) -std=gnu11 -Wall\n\nLIBS = -lm\n\n_DEPS = main.h\nDEPS = $(patsubst %, $(IDIR)/%, $(_DEPS))\n\n_OBJ = main.o other.o\nOBJ = $(patsubst %, $(ODIR)/%, $(_OBJ))\n\n$(ODIR)/%.o: %.c $(DEPS)\n    $(CC) -c -o $@ $< $(CFLAGS)\n\nmain: $(OBJ)\n    $(CC) -o $@ $^ $(CFLAGS) $(LIBS)\n\n.PHONY: clean\n\nclean: # core is for core dumps!\n    rm -f $(ODIR)/*.o *~ core $(IDIR)/*~\n```\n\nThere are a few extra oddities in this snippet. There are a few [automatic variables](https://www.gnu.org/software/make/manual/make.html#Automatic-Variables) being used. `$@` is the name specified on the left of the colon. `$<` is the first item in the dependencies list. `$^` is the names of all of the pre-requisites.\n\n`patsubst` is a helper function to replace words matching a specified pattern with some text. \"%\" acts as a wildcard character.\n\nWith the above information and the knowledge in the rest of this guide, try to break down what happens above for yourself as an exercise!\n\nThis file comes courtesy of [Bruce Maxwell of Colby College](https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/). If you try to re-use it, you may need to tweak the file paths a bit!\n\nThat's all for this Makefiles guide. Hope you enjoyed!\n\n\n## Glossary\n\n\n\n- **compile**, meaning to transform source code into object files (e.g. running `gcc main.c`)\n- **executable file**, a file that when run causes a computer to perform a set of instructions (e.g., the `main` in `gcc main.c -o main`)\n\n- **link**, meaning to transform many object files (i.e., the things made in compilation) into a single executable file\n- **machine code**, a (super) low-level programming language that controls a CPU\n\n- **object files**, a file that contain object code, which is machine code that is output from a compiler or assembler (e.g., our `.o` files); they cannot be run in the command line\n\n\n## Further Reading\n\n\n\n- [GNU Make Homepage](https://www.gnu.org/software/make/)\n- [A Simple Makefile Tutorial](https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/)\n\n- [isaacs/Makefile](https://gist.github.com/isaacs/62a2d1825d04437c6f08)\n- [makefiletutorial.com](https://makefiletutorial.com/)\n\n- [Using make and writing Makefiles](https://www.cs.swarthmore.edu/~newhall/unixhelp/howto_makefiles.html)\n- [Tutorial on writing makefiles](https://www.math.colostate.edu/~yzhou/computer/writemakefile.html)\n\n- [GNU ](https://www.gnu.org/software/make/manual/make.html)[`make`](https://www.gnu.org/software/make/manual/make.html)"
    },
    "a-decade-of-scrap-booking": {
      "createdDate": "2024-11-17T22:39:00.000Z",
      "description": "A decade of scrapbooking has taught me invaluable lessons about preserving memories and reflecting on life's journey through creative cataloging.",
      "editedDate": "2024-12-27T06:48:00.000Z",
      "id": "141c4188-fa0e-8082-b413-ed132c1dd339",
      "publishedDate": "2024-11-17",
      "slug": "a-decade-of-scrap-booking",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "A decade of scrap booking",
      "coverImage": "/blog-files/a-decade-of-scrap-booking/cover-scrapbooks.webp",
      "content": "In my first year of high school, I had the luxury of spending an all-inclusive weekend in Lacombe, Alberta. In case you‚Äôre not familiar, Lacombe is a city in central Alberta, 125 kilometers south of Edmonton and home of the Len Thompson Manufacturing Plant (that part, of course, you already knew). In 2017, it was home to the Alberta Student Leadership Conference. The website is still up, [here](https://connectedleaders.weebly.com/).\n\n![A poster from the conference. 800 student leaders!](/blog-files/a-decade-of-scrap-booking/001-image.webp)\n\nI went, starry eyed, to learn how to lead. And learn I did! (My whole leadership experience in high school would be a blog post on its own.) I attended countless workshops, keynotes, and lunches. And what did I get at each of them? (Besides, you know, leadership skills.) Paper. In some form or another: pamphlets, brochures, photos, postcards, name tags, bookmarks. You name it, I got one.\n\nComing home, I was faced with a serious dilemma. How was I going to possibly save all of this essential learning material? My printed-out-Polaroids? Or further still, my conference badge?! My mother (as always) had the solution. \n\nThe Hilroy Studio¬Æ Scrap Book.\n\n![The scrap book, in all its glory.](/blog-files/a-decade-of-scrap-booking/002-big_HLR26411.webp)\n\nThis series of twenty manila pages, coil-bound and enveloped in a firm blue cover has served as the springboard for a decade of creative cataloging. My now fourteen-book long series is a living memoir that has served as a window into my past (translated into two-dimensional form). A collection featuring romantic letters and nasty break-ups, acceptance letters and untimely rejections, postcards from around the planet and receipts from my local liquor store. It‚Äôs got everything.\n\nAfter occupying a corner of my bedroom for the past year, I recently sent them home to Edmonton (as I moved to San Francisco, to begin New Grad Life). I packed them up and shipped them off to the Great White North. However, while on a mini graduation trip in Tofino, British Columbia, my mom remarked that while one of the two boxes I sent home had arrived, the other was nowhere to be found. And of course, the missing box was the one with the scrapbooks.\n\nFor a short time, I was devastated. An entire decade of hand-picked, cherished collectibles had ostensibly been whisked away. Up until that point, I had never bothered to reflect on how much the cathartic cutting-and-pasting meant to me. It was just a sort-of offbeat hobby, a way to make sense of all the random Things that showed up in my pockets in my day-to-day life.\n\nThankfully, the scrapbooks did turn up only a handful of days later. The near-miss pushed me to think about how much this hobby had taught me about myself. And now, on the roughly ten year anniversary of the hobby, it‚Äôs time to finally share those reflections, and some of my favourite pages from along the way.\n\nFirst, I should share my Rules of The Scrap. \n\n1. Err on the side of keeping it\n\t1. Leaving a table at a restaurant? Scoop up the receipt. Have some miscellaneous paper in your pockets after a night out? Save it. Dump it all in a bin for later processing. I often find the most insignificant pieces (e.g., a receipt), to serve as the best starting point for a story (e.g., ‚Äúremember how laughably bad the service was?‚Äù).\n2. Make it real, not ‚Äònice‚Äô\n\t1. Let‚Äôs be honest: life is often ugly and occasionally beautiful, and my scrapbook reflects that. ‚ÄòScrap‚Äô means discarded, leftovers‚Äînot fancy gel pens and cursive writing. It‚Äôs not Instagram-ified (i.e., limited to the top 1% of all my best memories), but rather a depiction of my whole self.\n3. The opening is dedicated to travel, and the last to former-selves\n\t1. Travel makes life long and special, so for me it appears first-and-foremost‚Äîboarding passes, bus tickets, luggage tags, and more adorn the opening page.\n\t2. I also _usually_ dedicate the last page to pieces of ID I no longer use, as a kind of goodbye to a phase of life.\n\nExpanding on 3(b), here is, for example, the last page of scrapbook #9, featuring Michael the Singaporean Exchange Student.\n\nFeaturing my ‚ÄòTembusu Privilege Card‚Äô (though after being a guest [there](https://tembusu.nus.edu.sg/), the real privilege was mine), my Cardiflex (which, like any card for a printer, never worked), my bus pass, debit cards from the world‚Äôs most annoying bank, my student ID, and my foreign ID (featuring a rather rough passport photo taken after a nearly 20 hour flight).\n\nAll once mainstays in my wallet, now at rest in scrapbook #9.\n\n![The ID cards of scrapbook #9.](/blog-files/a-decade-of-scrap-booking/004-image.webp)\n\nI‚Äôll amass content over about a one to three month period, and then spend an afternoon sorting the content. I rip out the interesting bits and pieces, and paste them in haphazardly. (Usually I‚Äôll toss on a movie in the background. Since you got here, [you should follow me on Letterboxd](https://letterboxd.com/michaelfromyeg/)!)\n\nFor me, the activity of making the scrap books is as significant as the scrap books themselves. (Forgive me, but I'm going to be a bit philosophical here.) We Humans (‚Äîcapital ‚ÄòH‚Äô) toil away on the ol' Blue Marble. Purpose is something which we actively breathe into life. Those things which I scrap book‚Äîremnants from events, letters from relationships, receipts from dinners, and raffle tickets from the nights out‚Äîare, for me, little microcosms of our Purpose (‚Äîcapital ‚ÄòP‚Äô) here. Life must be lived! Piecing together the scrap books makes me appreciate the insanity and innate wonder of our existence here‚Äîall The Good, The Bad, and The Ugly.\n\nSoapboxing aside‚Äîhere are some of my favorite pages from each, with some stories.\n\n![Scrapbook #12. From my trip to Vietnam, circa April 2023.](/blog-files/a-decade-of-scrap-booking/006-image.webp)\n\n\n**Scrapbook #12**\n\nThe Ha Giang loop is probably some of the best travel you can do today. This is the route I took on the three day trip through north Vietnam.\n\nThe loop is so much more than getting on a motorbike and pressing the gas. It's the mishmash of people, the party, and the drivers themselves.\n\nHell, my driver (Thanh, pronounced 'Tyne,' which, to my amusement, is the real name of one of my other good friends) at just merely 26 years of age had four children. He had an inkling for YouTube trap-house mash-ups, and was astounded that a thing such as a [Big Booty Mix 22](https://www.youtube.com/watch?v=sm3bt4Q39b8) exists.\n\n\n**Scrapbook #1**\n\nThere have been very few times I've written in, or allowed writing in the scrap books. One exception was my last day of high school. These people all mean a lot to me, despite the fact that I've seen a whopping ~4 of them consistently over the past 5 or so years.\n\nLife moves fast; this page is a grounding reminder that the people in your circle can change immediately, without warning. A reminder to call your friends and let them know they‚Äôre loved, however you express that. \n\n(Also, we should take a moment appreciate the absurdity in the top middle of the page, and the purported run for Prime Minister implied by 'Michael DeMarco 2020!!' in the bottom right‚ÄîI'll take the votes.)\n\nOne more here: the 'Sorry Joey did you like that' was from prom. My best friend in high school, Jordan, and I campaigned for Best Bromance. In his best Steve Harvey impression, my friend announced it was uh‚Äîoh‚ÄîI misread the names‚Äîand just like that we lost. Can't win them all!\n\n![Scrapbook #1.](/blog-files/a-decade-of-scrap-booking/008-image.webp)\n\n![Scrapbook #6.](/blog-files/a-decade-of-scrap-booking/009-image.webp)\n\n\n**Scrapbook #6**\n\nMe, as a game of Wordle. If you had to guess where this was used, what would you go for first? Maybe a residence hall event? Perhaps some other club social?\n\nHow about a fraternity party?\n\nTwice annually, I had the privilege of getting to decorate my room in some absurd theme courtesy of Phi Gamma Delta a.k.a. Fiji's 'Small Rooms' function. In the spring of 2021, Wordle was all the rage, and thus my friend Jacob and I Wordle-ified his room. I actually created a custom version of Wordle for our room ('Fijidle'), which eventually got DMCA'd by the New York Times for copyright infringement. [Yeah](https://www.npr.org/2024/03/13/1238142507/cease-desist-new-york-times-wordle-spin-offs).\n\n\n**Scrapbook #14**\n\nLast but not least, I'd be remiss if I didn't give a shout-out to the Coffee News. This is‚Äîseriously‚Äîone of the things I miss most from Alberta. It's a two-page spread featuring four off-the-wall or otherwise 'neat' news stories, quotes, a bit of trivia, Horoscopes, jokes, and a game to search for a drawing of a little man among the ad space.\n\nI guess my mom picked up on how much I enjoy the weekly editions, so has now begun stockpiling them, and mailing them out to wherever I happen to be on a monthly cadence. Thanks, mom.\n\n![Scrapbook #14.](/blog-files/a-decade-of-scrap-booking/011-image.webp)\n\n\n---\n\nThose are just a few cherry-picked highlights, but there's of course much more story to tell. So where do I go from here? \n\nI‚Äôm tinkering with ways for friends to join on the story. I want to create something like a series of [FigJam](https://www.figma.com/figjam/) boards with collaborative \"sticky-noting\" of things that stick out to people. I do need to redact some of the content that‚Äôs a bit _too_ personal, but I think there's a cool, collaborative happy medium here.\n\nIdeas? Questions? Concerns? For the first two, feel free to write me at michaelfromyeg [at] gmail [dot] com; for the third, I'm not quite sure I care, so don't."
    },
    "rapviz": {
      "createdDate": "2024-12-28T00:01:00.000Z",
      "description": "Discover how RapViz uses NLP and modern web technologies to analyze and highlight rhymes in rap lyrics, making it easier to appreciate the artistry behind the words.",
      "editedDate": "2024-12-30T18:24:00.000Z",
      "id": "16ac4188-fa0e-8039-af80-e08e9185783d",
      "publishedDate": "2024-07-06T18:58:00.000-06:00",
      "slug": "rapviz",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "RapViz",
      "coverImage": "/blog-files/rapviz/cover-rapviz-negative-logo.webp",
      "content": "See your bars broken down right in the browser. Powered by Spotify, Genius, and Google Cloud. Check out the GitHub repository [here](https://github.com/michaelfromyeg)!\n\n![rapviz-main.png](/blog-files/rapviz/001-rapviz-main.webp)\n\n![rapviz-mfdoom.png](/blog-files/rapviz/002-rapviz-mfdoom.webp)\n\n\n### Background\n\n\nThere are loads of videos online that inspired this project. Take a look at Genius' version, [Check The Rhyme](https://youtube.com/watch?v=1VNHp_flJKE), or Vox's, [Rapping, deconstructed: The best rhymers of all time](https://youtube.com/watch?v=QWveXdj6oZU). These videos get millions, and I mean millions of hits online. Why? Well, it's fun! And it's cool. The basic concept is that rap lyrics are \"broken down\" and the rhyming groups are highlighted. Often the videos will do this on a syllable-by-syllable basis, but also sometimes do multi-word rhymes! For this project, we wanted to start simple and focus on single, whole word rhymes.\n\nWe thought we could leverage NLP, a couple of freely available APIs, and some basic React so create a website that generates these kinds of \"highlighted\" rhymes. So what happened?\n\n\n### Usage\n\n\nThe user is presented with one of two options. They may either submit their own bars into a text field, or they can sign into Spotify and have their current song's lyrics analyzed. The lyrics are printed out with the rhyme scheme highlighted.\n\n\n### How it's made\n\n\nWe used a Flask backend to write a couple of endpoints to help us LyricsGenius, an API for scraping lyrics from Genius. We also wrote our NLP-based rhyme detection algorithm in Python and processed all of that data on the backend. Spotify authentication and the UI was all handled by React. We eventually deployed our app to Google Cloud so other users could try it.\n\n\n### Challenges\n\n\nDeveloping the rhyme algorithm was really tricky, especially getting it to be fast enough (eventually down to O(n) time!). We also ran into issues integrating Spotify into our app, but eventually got it sorted.\n\n\n### Accomplishments\n\n\nWe are able to programmatically generate what would take a video editor likely a couple of hours to do! Leveraging modern web technologies and NLP, displaying the rhyme scheme of a song proved to be a challenging but very possible feat.\n\n\n### Future\n\n\nCheck out our [issues](https://github.com/michaelfromyeg/RapViz/issues) on GitHub! Though it was built at a hackathon (and there's quite a bit of spaghetti code) this is definitely a project I want to continue developing in the future."
    },
    "im-bad-at-flying": {
      "createdDate": "2024-12-27T06:25:00.000Z",
      "description": "A series of unfortunate events led to my hilarious and chaotic journey as a not-so-great flying passenger.",
      "editedDate": "2024-12-27T07:16:00.000Z",
      "id": "169c4188-fa0e-801f-bb54-e4c506a127de",
      "publishedDate": "2023-10-29",
      "slug": "im-bad-at-flying",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "I‚Äôm bad at flying",
      "coverImage": "/blog-files/im-bad-at-flying/cover-boarding-passes.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on October 29th, 2023.\n\nStory time. I'm bad at flying.\n\nBut I don't mean the act of flying, as a pilot. I mean as a passenger.\n\nHow can you be bad at packing your bags, going to the airport, filing through security, and hopping on a plane? Great question! I'm not sure, but after reading this, I think you'll be inclined to agree.\n\nRight now, I'm sitting in the Victoria airport after trying to board a short-haul flight to my hometown of Edmonton, having it cancelled and rebooked (instead through a three-way connection from Vancouver-Victoria-Calgary-Edmonton), then _illegally_ boarding my first flight with an expired license, only to get flagged in Victoria. That's right. I'm now stranded in YYJ all because I wanted to watch some Heritage Classic hockey. And for turning 22.\n\n![My four boarding passes, in all their glory.](/blog-files/im-bad-at-flying/000-boarding-passes.webp)\n\nThis morning was hell from start to finish. I woke up with a blistering hangover at the crack of dawn. The past night I'd spent Hall-o-weekend-ing and was now going to head to Edmonton to catch the Heritage Classic. It was the Battle of Alberta, and the first outdoor game in Edmonton in 20+ years. I convinced my whole family to go. I was elated! Upon arriving at the airport, however, I saw my flight was cancelled. I waited in a brutally long line of folks getting other flights sorted (including, but not limited to, some aspirant vacationers pleading to make it to Puerto Vallarta and a few Calgarians who faced a different, but similar cancellation‚Äîin that case, WestJet's probably doing them a favor by keeping them in Vancouver). It was only while waiting in this roughly hour-long line that I began to really feel the effects of running a half-marathon and clubbing the day prior. I was seething in pain, literally clutching one of the hand rails just desperate to take a nap on _some_ plane going somewhere.\n\nI finally got to the front, and the gate agent was friendly and understanding. \"You going to the game?\" I gave him a nod and he gave me one of the most ridiculous itineraries I've ever seen in return. First to Victoria, then to Calgary, _then_ to Edmonton, just in time for the 5pm puck drop. I had 20 minutes to make it to the gate, so I flew through security (with a bit of WestJet-endorsed line-cutting) and made it no problem. I boarded my flight with ease and had a smooth trip. What else could go wrong!\n\nLots. My connection from Victoria to Calgary got delayed, but not so much that I would miss my Edmonton connection. Annoying, but not an ordeal. I paid for a $22 breakfast sandwich, and finally started to fight off the hangover. I went to board the flight around 11am and the gate agent stopped me dead in my tracks. My license is expired?! There's no way! I _just_ **flew** here.\n\nI turned 22 on October 15th, 2023, and indeed, that's the day my license expired. Mind you I had bought alcohol, been to the club, and _boarded an aircraft_ with this identification. If I had had another piece of non-photo identification, I might've been able to board, but my other documents were with my passport at home. Boohoo. Back to Vancouver I go! Sheepishly, I messaged my family and transferred my mom the ticket.\n\nThis is where it gets better. When the gate agent told me I couldn't go, I wasn't that phased. **This isn't the first time my license has gotten me into plane-boarding trouble.**\n\n![Jasper, Alberta, Canada circa January 2021.](/blog-files/im-bad-at-flying/001-jasper.webp)\n\nStory time, again. Back in high school, I didn't get my license. So, during the summer after my freshman year, I did lessons with the Alberta Motor Association and was geared up for the exam. The only problem was the pandemic put a pause on the actual examinations. I had to write it in December, instead, when I was home for winter break.\n\nNo problem, I figured. I took the exam on the second last day of my trip home and passed with ease. I headed into the DMV to process the paperwork, and coincidentally was wearing my UBC hoodie. The DMV agent smartly asked if I'd need my license to fly back to Vancouver. After some discussion, we (that is, myself, the agent, and my mother, a.k.a., _my_ agent) agreed that the temporary one was fine. Why?!? I had no idea! That obviously makes no sense. But we all agreed.\n\nSo, when I got to the airport, I obviously wasn't let on. However, I needed to be back in Vancouver as soon as physically possible. I was scheduled to start my first-ever co-op gig with Samsung. I looked at flights and‚Ä¶ $#!T! Everything was unbelievably expensive or booked out.\n\nI explored all other options. Bussing? No dice. How about‚Ä¶ a train? The VIA Rail economy ticket wasn't too expensive (~$150 if I recall correctly). Done. Booked.\n\nAnd with that, I rode The Canadian from Edmonton to Vancouver in early January. The trip itself was stunning, with unbelievably gorgeous views of the Western Canada in wintertime. It was a bit eerie though, as the crowd on the train looked very no-fly-list-y. One dude in got kicked off in Northern British Columbia for using drugs in the washroom.\n\nThe other train ordeal was a massive blizzard that passed through the interior during the train travel. It knocked down a litany of trees, all over the tracks. This meant we would ride for twenty or thirty minutes, stop, clear the tracks, and go again. In the middle of nowhere! My mom had packed me peanut butter sandwiches for the train trip, and I had to start _rationing_ them. I killed time by trying to write unit tests for APK file extraction (‚Ä¶I was on the Knox team at Samsung). Not the most riveting stuff, I'll confess. Eventually, after nearly a complete **twenty-four-hour** delay, I made it back to Vancouver.\n\nYou would've thought that experience had taught me to carry my godforsaken passport, but evidently my hungover morning self was not exactly envisioning this exact scenario.\n\nFool me once, fool me twice. [And I'll probably make a fool of myself again](https://youtube.com/watch?v=aqGn-1XX7cI)."
    },
    "day-one-my-internship-at-amazon": {
      "createdDate": "2024-12-26T22:13:00.000Z",
      "description": "Reflecting on my transformative summer internship experience at Amazon, where I navigated complex projects, embraced new challenges, and learned invaluable lessons.",
      "editedDate": "2024-12-27T07:17:00.000Z",
      "id": "168c4188-fa0e-805c-9a31-d088de638da2",
      "publishedDate": "2022-08-23",
      "slug": "day-one-my-internship-at-amazon",
      "status": "Published",
      "tags": [
        "Blog",
        "Technical"
      ],
      "title": "Day One: My internship at Amazon",
      "coverImage": "/blog-files/day-one-my-internship-at-amazon/cover-amazon-desk.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on August 23rd, 2022.\n\nIt's been about two weeks since I wrapped up my position as a Software Development Engineer (SDE) Intern at Amazon, and I wanted to reflect on my time there this summer. I often get asked about the full end-to-end experience of my time at Amazon, so before I get into what I worked on and what I learned, I'll first do a full re-wind to my initial application.\n\n\n## Working towards a FAANG offer\n\n\nIn recruiting for my third co-op term at UBC, I laid out definitive guidelines for the kind of position I was after. My primary objective was to work at a company solving complex, 'technically engaging' problems, to grow quickly as an early-career engineer. In addition to at-work complexity, I was also very interested in moving to a new city in Canada or the US, to grow personally and get a chance to travel to new places.\n\nI applied to Amazon in early August as soon as their applications opened. (For those of you currently recruiting, this is often an overlooked but highly important factor; big companies often recruit on a \"rolling-basis,\" meaning an early application is critical.) I chose Toronto largely on a whim.\n\n![The e-mail inviting me to interview at Amazon.](/blog-files/day-one-my-internship-at-amazon/000-amazon-interview-invitation.webp)\n\nI then completed two online assessments (OAs). The first was a fairly standard set of technical questions on HackerRank, and the second was a \"work simulation\" to assess behavioural skills asynchronously. I fortunately passed, and then scheduled a final-round 45-minute technical interview. The interview was also fairly standard; it consisted of technical and behavioural questions. Unique to Amazon, the behaviourals are focused on a set of [leadership principles](https://amazon.jobs/en/principles) (LPs) that, I can now attest, are embedded throughout company culture. I'll touch more on the LPs later.\n\n\n## Getting settled in Toronto\n\n\nMoving to Toronto was a rather involved experience. Immediately after wrapping up one of my most brutal final exam schedules to date, I had to pack, donate, or dump my items from BC that I had nested during the pandemic. (It was... a lot of stuff.) Then I was busy with Amazon's pre-onboarding while also recruiting for Fall 2022 internships. (That's a whole [other story](https://michaeldemar.co/blog/rescind-playbook).)\n\n![My final exam schedule. Back-to-back networking, databases, and operating systems was not fun.](/blog-files/day-one-my-internship-at-amazon/003-b0a06e05-cccb-441b-b1f0-abf023437428.webp)\n\n![Leo, my pet Russian tortoise, also had to be sent home to stay with my parents.](/blog-files/day-one-my-internship-at-amazon/004-leo.webp)\n\nI boarded my flight and was off to Toronto. As an Edmonton native, Toronto was rather overwhelming. The city is gigantic and there is always something bustling. It truly is a \"concrete jungle,\" especially when you're working in the heart of downtown, situated right between the CN Tower and Scotiabank Arena.\n\nThankfully, I was able to take full advantage of what the city has to offer. And with weekend trips to Montreal, Niagara, and Muskoka, there was no shortage of nearby entertainment throughout my three-and-a-half months in the city.\n\n\n## From big tech to Bigger tech\n\n\nThe next major adjustment for me came in navigating life at a huge company. Make no mistake: Samsung, where I previously interned, is also large. However, there is something truly unique about \"Amazon-scale.\" When your intern class is nearly 15,000 folks, things will assuredly feel a bit different.\n\nThankfully, I had an awesome team and intern class around me to support me throughout the onboarding process. Amazon's onboarding, while extensive, is also exhaustive, leaving you with a full set of tools and knowledge to thrive in your time there. My initial nerves were replaced by excitement, and I dove head-first into our tech stack.\n\nI got onboarded to my project relatively quickly. Within the Supply Chain Optimization Technologies (SCOT) organization, I had the chance to work on a \"product tour.\" (Here's [an article](https://blog.asana.com/2018/10/move-fast-without-technical-debt-product-tours-react) from a former Asana intern about an analogous project for their core application.) It was built on top of a complex, multipage booking portal that used React. While I didn't anticipate being placed on a frontend project, I enjoyed it far more than I thought I would, and I learned a ton about today's challenges in scaling modern frontend technologies. (I'm even following this experience up by giving a React workshop at this year's [Hack The North](https://hackthenorth.com/) in Waterloo‚Äîmake sure to tune in.)\n\n![My desk!](/blog-files/day-one-my-internship-at-amazon/007-amazon-desk.webp)\n\n\n## Six lessons from the six\n\n\nIt was rare I had a day at work without some new learning or takeaway. Here are six of my highlights.\n\n\n### Lesson #1: There are no bad questions\n\n\nWhile I had a decent chunk of relevant React experience to leverage for my project, our application was still complex and tens of thousands of lines of code long. To navigate the tricky waters that come with being an intern in engineering, questions are your lifeline. I was able to on-board to our project right away by scheduling impactful one-on-ones and remaining curious about our project's anatomy.\n\nPersonally, my Achilles' heel as an engineer is getting bogged down by particularly challenging problems (and there are no shortage of those at Amazon). Asking questions turned out to be a fantastic shortcut for getting to the heart of an issue.\n\n\n### Lesson #2: Complexity is evil\n\n\nThere is one special question you can ask: \"why?\" Asking the right \"why?\" can help determine what exactly is desired by your end-user (or \"customer,\" in Amazon terms) and minimize feature bloat. In particular, I had chats with PMs from separate teams (...in entirely different continents), so finding cohesion in product vision and preventing unneeded complexity required careful question-asking.\n\n(As any good [Grug-brain developer](https://grugbrain.dev/) knows, complexity is an existential threat, so it should be eliminated at all costs!)\n\n\n### Lesson #3: Agility is your friend\n\n\nSomething interesting about the project I worked on was that it was actually a continuation of a former intern project. Often, Amazon interns complete a design phase for their project, scoping out the minimum viable feature set for an initial release before jumping into implementation.\n\nFrom nearly my first day, I was working on delivering an already-scoped design. I love getting hands-on, but quickly found myself in a cobweb of only partially ready code. I didn't take enough time to understand and revise the existing timeline, which left me trying to ship many features at once.\nThis led to large code changes that were difficult to test and debug.\n\nInstead, try to be as lean as possible in your code. Small commits, small pull requests, and minimally scoped changes make it easy to bisect changes when things, inevitably, go wrong. Also: any refactoring work must be completed prior to shipping new features.\n\n\n### Lesson #4: Community is key\n\n\nIt takes a village to raise a child, and it also takes a village to raise an intern. It's critical to develop open communication lines between yourself and your \"support network\" on the job. At Amazon, this consisted of my mentor, manager, my manager's manager, and the most senior engineer on my team. Scheduling regular one-on-ones and documenting the discussions levelled up my experience tremendously.\n\nThe idea of community goes beyond your team as well. It's also essential to immerse yourself in activities with your fellow interns and the broader city you live in as well.\n\n\n### Lesson #5: Culture isn't just buzzwords\n\n\nAmazon's leadership principles (LPs) are embedded into the DNA of the company. My co-workers would constantly leverage the LPs to guide hard decisions or steer meetings in the right direction. Beyond being the backbone of Amazon's culture, the LPs are also just brimmed with great life advice. As a former leadership student in high school, I had a lot of fun trying to embed ideas like \"Ownership,\" \"Invent and Simplify\" and \"Learn and Be Curious\" into my day-to-day at Amazon.\n\n\n### Lesson #6: Have fun\n\n\nIt's easy to get wrapped up in work and find yourself constantly worrying about return offers, your next internship, and the various other stressors of everyday life. Kick back with your co-workers when the chance arises and make the most of your internship. To help center myself, I would often reflect on where I came from to end up at Amazon. This kind of mindfulness exercise helped me make the most of my time at Amazon.\n\n\n## So... what's next?\n\n\nWhile I could not be more grateful for my time at Amazon, I also could not be more excited for what this next year has in store. I have a chance this August to rest and reconnect with family before I join Tesla this fall on the Supercharging team. I'll also be serving as an Undergraduate Teaching Assistant (UTA) for my first-ever 300-level course; namely, \"Internet Computing\" (CPSC 317) at UBC with Professor Alan Wagner.\n\nQuestions? Comments? Don't hesitate to reach out at [mdemar01@student.ubc.ca](mailto:mdemar01@student.ubc.ca).\n\nThanks for reading!"
    },
    "the-rescinded-internship-offer-playbook": {
      "createdDate": "2024-12-27T06:55:00.000Z",
      "description": "After having my internship offer rescinded, I'm sharing my game plan to navigate the job market and find new opportunities in tech.",
      "editedDate": "2024-12-27T07:14:00.000Z",
      "id": "169c4188-fa0e-807c-b7bd-f22056b73ac1",
      "publishedDate": "2022-07-17T23:55:00.000-06:00",
      "slug": "the-rescinded-internship-offer-playbook",
      "status": "Published",
      "tags": [
        "Blog",
        "Technical"
      ],
      "title": "The rescinded internship offer playbook",
      "coverImage": "/blog-files/the-rescinded-internship-offer-playbook/cover-email.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 17th, 2022.\n\nThis upcoming fall, I was set on making a number of fairly major life changes. Firstly, I was about to move from one of the world's largest technology companies to a cryptocurrency start-up. Secondly, I was going to pack my bags and move from Canada to Palo Alto, California. And thirdly, I was going to do it all basically on my own.\n\nAs of Thursday, I've been thrown back to square zero. Due to pressures in the cryptocurrency space, coined (pun-intended) a \"crypto winter\" (though frankly it seems pretty sunny in Toronto these days...), my offer at [BitGo](https://bitgo.com/) was rescinded.\n\n![The e-mail from BitGo.](/blog-files/the-rescinded-internship-offer-playbook/001-email.webp)\n\nTo be totally candid, I had kind of seen this coming. There were a number of major shake-ups with the early talent team that had recruited me in the first place, and I'd already seen the likes of Coinbase and Shopify pull similar moves. It's an unfortunate reality of working in an emerging industry, and I was aware of the risk in accepting the role. I'm still as passionate as ever about the potential of web3, and I know it won't be long until I'm back.\n\n![Shopify pulls internships.](/blog-files/the-rescinded-internship-offer-playbook/002-shopify.webp)\n\nI'm keeping my chin-up and have my focus fixed firmly on getting back to square one. In this post, I want to share my \"game plan\" for how I'm going to strive to achieve just that. It's essentially the advice I would give myself if I could go back two years and coach my freshman-self through a first round of internship applications. Hope you enjoy.\n\n\n## 1. Use your network\n\n\nThis piece is especially important when you're just getting started with recruiting in tech, or when you've faced a bit of a setback. To use a clich√©, \"your network is your net worth!\" I find computer science doesn't have the same culture around recruiting, coffee chats, etc., as other industries, but it can truly accelerate your career.\n\nUse social media to be open about projects you're working on and roles you're looking for. Keep your profiles up-to-date and try to stay somewhat active throughout the year. I think everyone feels a bit of anxiety around posting on LinkedIn, but that's easily one of the most effective channels. I've had 25,000+ impressions on my latest post. \"Tech Twitter\" is also a great place to stay active; I often find early-stage founders recruit directly from the site. Relying on visible, open job applications like Indeed or LinkedIn is merely the tip of iceberg of what's out there!\n\n(Another more \"bold\" strategy is becoming a content creator YouTube. I've met a ton of cool people after posting [this](https://youtube.com/watch?v=9FP8esDPPKY) video on advice for getting into the computer science major at UBC. To this day, I continue to get emails and DMs from students all across the globe!)\n\nAlso, go to stuff! I love using apps like Eventbrite and Meetup to see what's happening in my area. Attending events is bar-none the best way to meet people; networking \"online\" is not nearly as effective as just bumping into strangers at a conference. Try to step out of your comfort zone and put yourself out there. You'd be surprised what can turn up!\n\n\n## 2. Don't be shy\n\n\nWhen it comes to recruiting, you simply cannot afford to be shy. It's akin to that hackneyed quote, \"shoot for the moon, and you're destined to land in the stars.\" Any ounce of impostor syndrome will hold you back from sending that one key cold email, or submitting an application to that one key role. After all, given the sheer size and rapid growth of the technology industry, it has been and continues to be a \"numbers game.\" Finding a job you love takes a fair amount of dedication, and obliges casting a wide net.\n\nI want to add a caveat here as well. This piece of advice I did not follow _at all_ last summer, and I got extremely lucky to end up at Amazon. I applied to a minimal set of jobs, and instead was bailed out by Greylock and a few \"LeetCode easy's.\" Amazon is a fantastic company, and I am extremely fortunate to be where I am, but without casting a wide net, you'll be left with a lingering \"what if?\" Always try to aim higher; contentment will limit you!\n\nA good way to apply this right away is to cold email your dream companies. For example, I've always wanted to work in the NLP space, and a dream company of mine is [Voiceflow](https://voiceflow.com/). I sent a brief, direct email to the founder, and I heard back! While it didn't lead to a job, I came pretty darn close to a dream role. All from email!\n\n![An e-mail to Braden Ream, the CEO of Voiceflow.](/blog-files/the-rescinded-internship-offer-playbook/005-voiceflow.webp)\n\nThis time around, I am working diligently and systematically to exhaust all possible avenues. Persistence pays dividends in the long run.\n\n\n## 3. Gratitude in all things\n\n\nIn relying on your network's support and applying just about... everywhere, you must lead with gratitude. It is vital to show thanks for those that support you along every step of the journey. I would not be at my current university or in my current job if it weren't for the support of my family, a host of invaluable mentors, and a number of friends over the years encouraging me to keep pushing. It's essential to take time to show thanks; it's the right thing to do!\n\nThat being said, it's often overlooked. In the hustle and bustle of trying to get a job, it is easy to forget the follow-up thanks. Leading with gratitude is key.\n\nHere's an easy way to apply gratitude right away. _Always_ follow up after chats and interviews. Sending a thank-you email is a must-do in my book, and can help you stand out. You can try kick-starting relationships with past mentors as well. It is never too late to rekindle and say thanks.\n\n\n## 4. Builders build\n\n\nIf I could only pick one rule to keep, it'd be this one. The beauty of computer science is that no one can stop you from building. Like really, no one. (OK... maybe like, the FBI. But that's about it.)\n\nLeft without a job, there are countless ways to upskill and get ready for the next round. My favorite is building out 'little apps' (though a fully-fledged start-up is great, too). Participating in hackathons is a great way to get this going. Ask your friends and family what kinds of problems there having, and make little hacks for them. Keep them accessible for others online, and do it [in public](https://swyx.io/learn-in-public). Another good trick for easy adoption is building products for other developers; some good examples are CLI tools and IDE extensions.\n\nThe best experience I had with this was in Summer 2020 participating in an ex-Uber engineer-led program called [\"Summer of Shipping\"](https://summerofshipping.com/). It was an awesome community to helped folks bounce back from a summer with a _ton_ of offers rescinded. I even worked at a start-up idea [weNote](https://wenote.ca/) that I'm hoping to return to this upcoming year!\n\n![My landing page for weNote.](/blog-files/the-rescinded-internship-offer-playbook/009-wenote.webp)\n\nThere's also tons of resources online where you can learn for free, if you need a break from purely creating.\n\nJust remember: the beauty of software is that truly anyone where anywhere can get started today. So don't wait for a FAANG offer to get started; start building today.\n\n\n## In parting\n\n\nThose are the 4 rules that I'll be following while re-recruiting for the fall. Have any you would add? Feel free to give me a shout at [mdemar01@student.ubc.ca](mailto:mdemar01@student.ubc.ca). I'm always happy to chat."
    },
    "fill-your-cup": {
      "createdDate": "2024-12-27T06:28:00.000Z",
      "description": "In this post, I explore the importance of daily highlights that help fill our metaphorical cups, especially during challenging times.",
      "editedDate": "2024-12-29T23:22:00.000Z",
      "id": "169c4188-fa0e-8062-87fb-cc0fc275b670",
      "publishedDate": "2022-07-03",
      "slug": "fill-your-cup",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "Fill your cup",
      "coverImage": "/blog-files/fill-your-cup/cover-collision.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 3rd, 2022.\n\nEvery single day, you start out as an empty cup.\n\nHumbling, right?\n\nBeyond your laundry list of personal to-dos, slog of tasks at work, and mountain of messages to which you need to respond, you actually need to focus on just one thing each day. And that's filling your cup.\n\n\n## The inspiration\n\n\nI came across an idea loosely linked to this end product from YouTuber [Ali Abdaal](https://youtube.com/c/aliabdaal). His rather simple, but genius suggestion was to mark a highlight each and every day of your life. \"Mark\" can look differently depending on your routine; my weapon of choice is inscribing an \"H\" beside an item from my bullet journal. In some way, though, you should be tracking your highlights for easy reflection.\n\nHaving a \"highlight\" each day doesn't mean spending every day at a concert, or a sports game, or at the hottest club. Rather, it's something that brings you a bit of needed warmth when life's natural chaos ensues. It can be as simple as a great meal, a brisk walk, or a quick phone call. They're moments that you'd want to capture and put in jar for safe-keeping, but often a quick photo will have to do.\n\n\n## The idea\n\n\nAnd those highlight moments help \"fill your cup.\" (The \"highlight\" idea for me is a bit plain, but I think a visual analogy gets it across better. Maybe that's my inner-teacher speaking.)\n\nNot all cups are created equally, either. After a particularly stressful day or week, I find my cup becomes more of a vat. Other times, I'm a bit more of a teaspoon. Being aware of this ebb and flow though has proven to be a particularly powerful idea when it comes to managing my mental health.\n\nWith the pandemic, we had a bit of a drought. It was hard to stumble across cup-filling-moments, so to speak, and I did not effort to create them when they were most needed. On an empty cup, it's hard to be yourself. Not just in terms of the capitalist-fuelled \"can I reach _Inbox Zero_?\" sense, but spiritually, just 'being' yourself.\n\n\n## A year half-full\n\n\nAnd since we've reached the halfway point of 2022, I figured I'd challenge myself to look back on my favorite cup filling moments from this year so far.\n\n\n### Board games at a bar (January)\n\n\n![Scrabble at Browns, with the fellas.](/blog-files/fill-your-cup/001-scrabble.webp)\n\nI'm a nerd at heart, and after months of Wordle, I had to put my new skills to the test. It turns out only mastering 5-letter words is not all that beneficial when it comes to playing Scrabble at Brown's. Regardless, board games at a bar is definitely an underrated activity.\n\n\n### A moment with some trash (February)\n\n\n![Me n‚Äô my trash!](/blog-files/fill-your-cup/002-garbage-cleanup.webp)\n\nI hadn't planned an event in ages. After a year of mostly typing 60 WPM in front of Visual Studio Code (or Vim, if I'm feeling adventurous), it felt great to organize a beach clean-up on the UBC campus. This is a nice moment I had with some trash, after the event.\n\n\n### Volunteering at Collision Conf 2022 (June)\n\n\n![Volunteering at Collision 2022.](/blog-files/fill-your-cup/003-collision.webp)\n\nAnd last but not least, my favorite recent highlight has to be volunteering at this year's Collision Conf. I still remember dreaming of attending as a first-year student working on my first, rather half-baked start-up idea. Since then, my passion for founding has only grown, and I'll be looking to get to work in this last half of 2022. I'll definitely be back at Collision, though hopefully as a founder rather than a volunteer!\n\n\n## In sum\n\n\nSo, those are my cup filling moments. As I battle of this week's edition of the Sunday Scaries, finally getting back to writing again just might fill my (rather average-sized) cup for today."
    },
    "predicting-credit-card-defaults": {
      "createdDate": "2024-12-27T23:58:00.000Z",
      "description": "This blog post explores the use of machine learning to predict credit card defaults, highlighting the challenges and promising results of a LightGBM model based on Taiwanese financial data.",
      "editedDate": "2024-12-30T18:24:00.000Z",
      "id": "169c4188-fa0e-80a9-b30a-fbd22565ada7",
      "publishedDate": "2022-04-18T18:58:00.000-06:00",
      "slug": "predicting-credit-card-defaults",
      "status": "Published",
      "tags": [
        "Project",
        "Technical",
        "School"
      ],
      "title": "Predicting Credit Card Defaults",
      "coverImage": "/blog-files/predicting-credit-card-defaults/cover-ales-nesetril-credit-card-unsplash.webp",
      "content": "_The following blog post was written for the final homework submission of_ [_CPSC 330, UBC's \"Applied Machine Learning\" course_](https://github.com/ubc-cs/cpsc330)_. In the course, my partner Max and I got a hands-on introduction to machine learning with Python via sklearn._\n\n![ales-nesetril-credit-card-unsplash.jpg](/blog-files/predicting-credit-card-defaults/001-ales-nesetril-credit-card-unsplash.webp)\n\n[hw6.pdf](/blog-files/predicting-credit-card-defaults/002-hw6.pdf)\n\n\n## Problem\n\n\nDefaulting on a credit card payment is a challenging situation for all those involved. The individual who defaulted is tasked with rebuilding their credit score, and the issuer is laden with the debt. Ideally, a financial institution could _predict_ whether or not someone will default ahead of time, and prevent it from happening in the first place.\n\nWhile this is a daunting task‚Äîand one that requires sensitivity given the fact we are dealing with people's financial livelihoods‚Äîthis is a situation where machine learning can be of use.\n\n\n### Question\n\n\nWe'll apply machine learning techniques to answer the following question.\n\n> Will this person default next month on their credit card payment?\n\nWith data relating to that person's demographics, payment history, and other financial information, we can attempt to predict the answer to this question.\n\n\n### Data\n\n\nThe data set we used is publicly available on [Kaggle](https://kaggle.com/uciml/default-of-credit-card-clients-dataset). In contains demographic information such as sex, education, marriage and age; information regarding and individual's finances including limit balance, repayment status, bill amounts, and payment amounts. Finally, it contains whether or not that individual really _did_ default next month.\n\nThis is simply a high-level description of the data; for a more in-depth view, consult Kaggle or our [full report](https://www.notion.so/michaelfromyeg/hw6.pdf).\n\n\n## Exploration\n\n\nBefore we delve into our analysis, let's get a better sense of the data available.\n\nTo begin with, we portioned off a chunk of our data, namely 25%, to eventually assess our model's effectiveness after our model is already created. Let's explore the remnants.\n\n\n### Exploratory Data Analysis (\"EDA\")\n\n\nWe have 225,000 rows in our data available for training use, each representing an individual and their associated \"features\" (such as age or sex) as outlined above.\n\nThe \"average\" demographic in this data is someone who's single (instead of married), has a university-level education, and an age of about 35.\n\nThe individual with the highest limit balance is a 47 year old female with precisely NT$1,000,000 available, equivalent to roughly USD$100,000. This is definitely an outlier; the distribution for the rest of the balances is shown below. (Note dollar amounts are in New Taiwan dollars.)\n\nWe find most balances in the range of NT$50,000 (~USD$6,500) to NT$100,000 (~USD$13,000) which seems reasonable.\n\n![distribution-of-payamt2.png](/blog-files/predicting-credit-card-defaults/005-distribution-of-payamt2.webp)\n\n![distribution-of-limitbal.png](/blog-files/predicting-credit-card-defaults/006-distribution-of-limitbal.webp)\n\n![distribution-of-classes.png](/blog-files/predicting-credit-card-defaults/007-distribution-of-classes.webp)\n\nThe repayment statuses in the month of August 2005 are, for whatever reason, highly skewed towards 0, which is the encoding of \"use of revolving credit.\" A visualization of this is shown below.\n\nIt might be interesting to investigate any geopolitical events that occurred in the same time frame of this data set, the summer and fall of 2005, to account for any global financial trends.\n\nWith a better understanding of the data at hand, we proceed to our analysis.\n\n\n## Analysis\n\n\nBelow is a description of our final model, and the results it yielded.\n\n\n### Model\n\n\nFor our final model we opted to use [LightGBM](https://lightgbm.readthedocs.io/en/latest/index.html), which is a gradient boosted tree based model. Gradient boosted models are ensembles of weaker prediction models, in our case, decision trees.\n\nLightGBM greatly outperformed the Decision Tree model. It also consistently outperformed the Random Forest model, even after we performed feature selection using `RFECV` and hyperparameter optimization using random search.\n\n\n### Results\n\n\nThe LightGBM model achieved an accuracy of 0.82, F1-score of 0.48, and recall of 0.38. This means that from our test data, we would correctly predict whether or not someone would default about 82% of the time. Among all of the examples of \"did default,\" we're correct only 38% of the time (‚Äîgiven the imbalance in the data set, this is somewhat to be expected). These results are promising, and should generalize well on \"deployment data\" since the test and validation scores are similar.\n\nIt's also interesting to look at how important our features were in the LightGBM model. SHAP force plots are one way of achieving this; without diving into depth here, just know that \"red\" means \"did not default,\" and a bigger arrow implies more impact.\n\nIn the two plots above, we see that PAY1 played a major role. Perhaps this is because if an individual gets off on the wrong foot, they are unlikely to ever recover. Banks might be incentivized to try to get on top of late payments immediately, to prevent financial hardships from spiraling into an eventual default!\n\n![shap-force2.png](/blog-files/predicting-credit-card-defaults/009-shap-force2.webp)\n\n![shap-force1.png](/blog-files/predicting-credit-card-defaults/010-shap-force1.webp)\n\n\n## Reflection\n\n\nWhile we are satisfied with our results, there are some caveats that should be made known before anyone attempts to use this model on \"real world\" use-cases.\n\nFirstly, the given data suffers from class imbalance. Most of our examples were of type \"did not default,\" at a ratio of nearly 3-to-1. The imbalance in our data was naturally occurring, so we asked ourselves what kind of error we were trying to minimize. We were concerned with minimizing false negatives, and so we chose to focus on recall as our evaluation metric. Sometimes naturally occurring class imbalance is okay to ignore. However, we believe that a possible improvement of our modeling could be to undersample or oversample the data to attempt to further address class imbalance.\n\nSecondly, the data available here was highly localized. All of our examples were from Taiwan, and so it is likely that our modeling would not generalize well to anywhere else in the world. Applying this model as a US Bank, for example, would be inappropriate as different cultures may exhibit different financial habits.\n\nFinally, there may have been overfitting on the hyperparameters. The final model described here was not our only attempt at this problem; rather, it was just our best attempt. Since we re-tested with various models and ran our hyperparameter tuning more than once it is _possible_ that we unintentionally overfit our model.\n\n\n## Conclusion\n\n\nFrom our data set, we were able to produce a LightGBM model that showed promising results, with a recall score of 0.38. In the future, we could look to further tune our LightGBM attempt to improve on our performance!\n\nThanks for reading! Hope you enjoyed it."
    },
    "jcite": {
      "createdDate": "2024-12-27T23:56:00.000Z",
      "description": "A user-friendly tool to effortlessly create and manage citations for academic assignments.",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-80b5-9006-c1f1c0f4d3f5",
      "publishedDate": "2021-06-04T18:58:00.000-06:00",
      "slug": "jcite",
      "status": "Published",
      "tags": [
        "Project",
        "Technical",
        "School"
      ],
      "title": "jCite",
      "coverImage": "/blog-files/jcite/cover-zotero.webp",
      "content": "Create and manage your citations without all the headaches!\n\n\n### Background\n\n\nThis project was made for CPSC 210, a UBC second-year course focused on software construction. The course uses Java, and likewise this project was made using Java and JavaFX for the UI. I asked my girlfriend if she had any project ideas, and she mentioned she struggled keeping track of citations for her assignments, so I wanted to build a tool that could meet her needs. I felt the exact same feeling when I wrote my 4,000 word Extended Essay in high school. Trying to remember and keep track of citations can be hard if you're not an experienced writer.\n\n\n### Usage\n\n\nA user can create an account and manage a list of assignments. With each assignment, they can paragraph-by-paragraph manage citations (e.g., who are you citing, what page number, etc.) and then automatically generate a works-cited page with reported \"confidence.\"\n\n![zotero.png](/blog-files/jcite/000-zotero.webp)\n\n\n### How it's made\n\n\nThe project is made with vanilla Java and JavaFX.\n\n\n### Challenges\n\n\nI struggled quite a bit with the algorithm to generate citations, but I'm happy with what I ended up with! Maybe I'll release it separately as an API or something.\n\n\n### Accomplishments\n\n\nI think the project structure is quite nice, and I'm happy with the UI! It was my first time using JavaFX.\n\n\n### Future\n\n\nIt'd be cool to port this to an Android app or something. I should also probably created a \"released\" version."
    },
    "grouber": {
      "createdDate": "2024-12-27T23:54:00.000Z",
      "description": "groUber simplifies carpooling for event planners, making it easy to coordinate rides with friends and optimize schedules effortlessly.",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-8043-9009-e3c299828b86",
      "publishedDate": "2020-08-06T18:58:00.000-06:00",
      "slug": "grouber",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "groUber",
      "coverImage": "/blog-files/grouber/cover-grouber.webp",
      "content": "![poster-01.png](/blog-files/grouber/000-poster-01.webp)\n\ngroups + Uber = groUber. Source code available [here](https://github.com/michaelfromyeg/groUber).\n\ngroUber is aimed to help event planners create carpools and was built for To the Moon and Hack, [an MLH event](https://mlh.io/). (If you're going to use this project to plan your event, remember to stay 6ft apart!)\n\n\n### Motivation\n\n\nThis project was built by a group of 5 students from UBC in Vancouver, BC who love automating things. And one horrific task all of us have run into when planning our events is creating a workable carpool schedule.\n\nIt's a great option for getting your group together: whether it be parents figuring out how best to get their kids to soccer practice, or friends accommodating those without access to a car, carpooling is common, but creating a plan can be painful, to say the least.\n\nYou finally come up with a workable schedule: everyone can make it to the event, no driver has to go in annoying, wasteful loops, and everything can start on time.\n\nThen a driver with 4 seats drops out. And you have to do it all over again. No, thanks.\n\n\n### Introducing: groUber\n\n\nWith groUber, never go through that headache again. As an event organizer, create your event, send an invite link to your friends, and create a carpool schedule with one click. As a participant, simply receive a link, RSVP, and inform the organizer of how many seats you have available. You'll receive a schedule on the day-of.\n\nUsing the Radar API and the Google Maps API, along with a bit of algo-magic, our app will create the most optimal carpool schedule for everyone involved. We were hesitant to do this project at first; the idea of designing an algorithm to find the \"best\" carpool strategy was intimidating to say the least. After some research, it turns out this is actually classified an NP-hard problem. We didn't need to solve the problem generally though, and were able to design a heuristic algorithm to be able to compute this with fairly good results. Here are a few examples of scholarly work in this area. It took great teamwork, persistence, and a decent amount of caffeine to get this working.\n\nNow, drivers won't have to waste gas, and everyone will get there on time. Someone drops out? No problem, our app will allow you to adjust your schedule, painlessly.\n\ngroUber is ride-sharing for your group of friends, without all the expenses and overhead. Do a favor for the environment, and for your stress-levels, and start using groUber today.\n\nHere's our [whitepaper](https://docs.google.com/document/d/e/2PACX-1vSLo8DhZ7p-VgPnmieasD01zZ2_76uMxPxSwVErq3_gQPvpokrFI4G5SHA1Pxrc9b9ouhK5yvL-4X3t/pub) where you can find a more in-depth justification for this hack! We also have a [slide deck](https://docs.google.com/presentation/d/e/2PACX-1vRY4A2dxP3vd1L7tY9gNC1Y0oegweKaiE9ZRHzulQArcLDld2zxErJQPk2TWvtwONXqdFWSECFlWEhh/pub?start=false&loop=false&delayms=15000&slide=id.p) for the visual learners out there.\n\n\n### Stack\n\n\n\n- TypeScript, React\n- Node.js, npm\n\n- Firebase, including authentication, hosting, and Firestore\n- GitHub Actions\n\n\n### Usage\n\n\nHead to [grouber.online](https://grouber.online/). Sign-up using your Google account.\n\nCreate your event with all key details, and send an invite to your to-be attendees. Once they RSVP, you'll see their details on your event dashboard. Then, generate your event's carpool schedule in one click!\n\nParticipants must submit their address, if they're driving, and if so, how many seats they have available in their vehicle.\n\nCheck out some screenshots of the application below!\n\n![grouber.png](/blog-files/grouber/006-grouber.webp)\n\n![homescreen.png](/blog-files/grouber/007-homescreen.webp)\n\n![RSVPPage.jpg](/blog-files/grouber/008-RSVPPage.webp)\n\n![appMap.jpg](/blog-files/grouber/009-appMap.webp)\n\n![branding.png](/blog-files/grouber/010-branding.webp)\n\n![dashboard.jpg](/blog-files/grouber/011-dashboard.webp)\n\n\n### Contributing\n\n\nCheck out the GitHub repository for more information."
    },
    "my-covid-summer": {
      "createdDate": "2024-12-27T06:59:00.000Z",
      "description": "Reflecting on a transformative summer during the COVID-19 pandemic, I navigated unexpected challenges and found unique opportunities for growth and learning.",
      "editedDate": "2024-12-27T07:13:00.000Z",
      "id": "169c4188-fa0e-80e9-b1df-e36f4325a24e",
      "publishedDate": "2020-07-18T00:07:00.000-06:00",
      "slug": "my-covid-summer",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "My COVID summer",
      "coverImage": "/blog-files/my-covid-summer/cover-notion.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 18th, 2020.\n\nIt's a Friday after classes. I'm grabbing a quick bite at one of UBC's only on-campus sit-down restaurants with a close friend, and a Gmail notification appears on my phone. As soon as I saw \"UBC\" in the subject line, I already knew what it was going to be.\n\nStudents had already been buzzing about it for the past week, and I even [tweeted](https://twitter.com/michaelfromyeg/status/1238500414053429248?ref_src=twsrc%5Etfw) about it. We were _finally_ going online.\n\n> Classes are suspended at the UofA, UofT, McGill, Stanford, Western, UDub, Harvard, and UBC is still open... Pumped to go earn my 2% iClicker participation marks today.\n\n\t‚ÄîMichael DeMarco (@michaelfromyeg) [March 13, 2020](https://twitter.com/michaelfromyeg/status/1238500414053429248?ref_src=twsrc%5Etfw)\n\nTrailing behind the universities I mentioned in my Tweet, all of our classes were going remote starting the following Monday. Even though I had seen it coming, I was still a bit shell shocked. I think everyone had their \"COVID-19 moment\", where it stopped being a headline you read about in the news, and started dictating your way of life. Mine came in a 3-part saga.\n\nFirst, it was [Hacktech](https://hacktech.io/). Over Christmas break, a friend shared that Caltech's hackathon had opened their applications for 2020, and I thought it'd be a neat opportunity. I poured over my application, and with a bit of good fortune, got accepted. I booked my ticket to Pasadena and could hardly contain my excitement. Then, it moved online. Four-hundred dollars down the drain, I was a bit disappointed, but I got some friends together from UBC and ended up actually submitting a [project](https://rapviz.appspot.com/) and earning a finalist distinction. This was a solid silver-lining; my fingers are crossed that I may take part in the event next year.\n\n_More on RapViz: the source code for the project is available_ [_here_](https://github.com/michaelfromyeg/rapviz)_. My teammates and I used Flask, React, and the Genius API to put this together. It definitely needs a touch-up, but the code is most of the way there. It also needs to be refactored, splitting apart the API code from the front-end._\n\n![Here‚Äôs RapViz.](/blog-files/my-covid-summer/005-rapviz.webp)\n\nSecond, it was, as I mentioned, school. Classes being online turned campus into a ghost town almost overnight. First-years flooded out of residents, clubs scrambled to pivot scheduled events online, and I clung on for dear life in each of my classes, submerged in school work. Within a few weeks, I managed to find a somewhat free weekend, pack my life away into four plastic boxes, and drive back to Edmonton. Over that weekend, I got an email from a software developer at the Government of Canada letting my know the internship I had just interviewed for was being eliminated. It was a bad week, to say the least.\n\nThird, it was [SUNIA](https://sunia.ca/). SUNIA is this week-long summer program I've worked with for nearly three years now. I started off in a generic programming coordinator role, helping make UN-related educational material; in my second year, I led marketing and did a fair amount of graphic design, while also working as our \"CTO\" (I snicker at the title, too); this year, I was working as the staff registrar, and also doing a bit more technology related work. [SUNIA got cancelled.](https://sunia.ca/covid) Again, like my semester moving online, I had seen this coming, but still, it meant my fears about a fully indoors summer and an online fall semester were validated.\n\nI was defeated, but I still wanted to make something of my summer. Being so late in the recruiting year, my outlook was fairly bleak. [Here's](https://notion.so/michaelfromyeg/49058c86c8d44605b65f9637d8f9e8a7?v=3acd8e103476491f833c4d69a39995df) the Notion page where I tracked my applications. Nothing too exciting of note; I had to apply to a ton of start-ups, some unpaid internships, and a lot of, erm, _interesting_ positions, to say the least.\n\n![My Notion job board.](/blog-files/my-covid-summer/009-notion.webp)\n\nThen, I thrice got lucky. The first stroke of luck came in the form of an offer to TA an introductory computer science class. I had TA'd during the second semester of my first-year, and leveraging that, I nabbed a TA position for the first summer term. Being only a 10-hour per week role, I still wanted to do a little more. But, it was a definite start.\n\nI also was able to leverage LinkedIn and find a part-time position with my school's Electrical and Computer Engineering (ECE) Department. If I'm honest, I think posting on LinkedIn is mostly a waste of time. There's just too much clutter on the platform; your time would be better spent working in public on GitHub, and tweeting your progress. But again, somehow a post of mine reached a communications lead working with ECE who thought I'd be a good fit for a position they'd just opened. ECE wanted to launch a new website they were working on, but needed help seeing it across the finish line. Their [old website](https://ece.ubc.ca/), built using Drupal, was getting near-impossible to maintain, and they had already made a dent in a new WordPress site. With ECE, I've written a [few](https://ece.ubc.ca/news/202005/ece-capstone-faculty-award-recipients) [blog](https://ece.ubc.ca/news/202006/ece-phd-candidate-awarded-prestigious-microsoft-research-grant) [posts](https://ece.ubc.ca/news/202007/ubc-masc-student-developing-wearable-device-track-heart-and-brain-signals) about research ECE grads are doing, wrote a lot of HTML, CSS, and a bit of PHP for the new WordPress site, maintained some legacy code on Drupal, and done a bit of marketing work. It's been a cool gig. I also wrote a few projects to help me automate tasks at work. [Here's](https://github.com/michaelfromyeg/pylink) one, which interprets HTTP status codes into a \"report\", given a list of URLs, and [here's](https://github.com/michaelfromyeg/rECEsearch) another, which collects UBC ECE research and formats it in a way which can be uploaded to WordPress.\n\nFinally, there was a _third_ stroke of luck I would never have seen coming. For the past few months, I'd been doing _ish_ contract work with a IoT company called [Artesian Software](https://artesiansoft.com/). I say _ish_ because though I was on board as a developer, there was simply no work to be done. Then, thankfully, around about mid-May, the company signed a contract, and we were off to the races. We've been building a platform to support businesses communicate with customers post-COVID. You can see my handiwork [here](https://shieldscore.com/). I get to work on a modern tech stack, which is a nice change of pace from Drupal: React (and React Native at one point), Node, SCSS, AWS (RDS with PostgreSQL, Dynamo, Cognito), ESLint, Stylelint, Prettier, and more. I've worked with the Stripe API, created my first microservice, learned a ton about REST, and even more about React.\n\n![The ShieldScore product.](/blog-files/my-covid-summer/018-artesian.webp)\n\nWanting to write a bit more code, I also joined an online community for hackers looking to replicate the in-person intern experience called [Summer of Shipping](https://summerofshipping.com/), and joined a pre-seed accelerator [program](https://studentstartuplife.com/programs/student-summer-program) from Startup Edmonton, where I've been building [weNote](https://wenote.ca/). I've also participated in a couple of hackathons; at one I wrote [a VS Code extension](https://marketplace.visualstudio.com/items?itemName=michaelfromyeg.vscode-puzzle) to help you practice interview-style coding problems in your editor, which won me the \"best use of an external API award.\" (Even though I wrote my own API and did some, erm, questionable scraping. Whoops.) It currently has 14 installs, which is pretty cool!\n\n_Quick update for 2022: it now has 127+ installs and 10+ stars on_ [_GitHub_](https://github.com/michaelfromyeg/vscode-puzzles)_! Development is still actively continuing; my next planned feature is to support puzzles from Advent of Code._\n\nLooking forward to the fall semester, I'm definitely nervous. Online school is hard. There's no getting around that fact. I'll be moving back to Vancouver, so hopefully cutting down the distance and being at least in the vicinity of campus should help my productivity. I'll also gain a bit of a community to rely on.\n\nBeyond the fall, I also have to hunt down co-op positions for winter and summer 2021. The COVID and post-COVID job market is assuredly a \"buyer's market,\" meaning that employers now have the pick of the litter when it comes to applicants. It's a scary reality, but it's one that's not going away anytime soon. My plan, for now at least, is to keep building projects, keep learning, keep being curious, and to stay vigilant. I'm not going to bother betting on getting lucky with offers again; lightning never strikes twice in the same place."
    },
    "massive-volunteering": {
      "createdDate": "2024-12-27T23:57:00.000Z",
      "description": "A platform designed to bridge high school students with volunteer opportunities from various organizations.",
      "editedDate": "2024-12-30T18:23:00.000Z",
      "id": "169c4188-fa0e-80be-8567-dbd1c556f154",
      "publishedDate": "2020-05-03T18:58:00.000-06:00",
      "slug": "massive-volunteering",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "Massive Volunteering",
      "coverImage": "/blog-files/massive-volunteering/cover-massive-homepage.webp",
      "content": "A website built to connect high school students with organizations actively searching for volunteers. [Here's](https://github.com/michaelfromyeg/Massive-Volunteering) the GitHub repository.\n\n\n### Background\n\n\nIn high school, I completed the IB program. For my Computer Science Internal Assessment (IA) I decided to build a website for a club I was also helping lead. The basic goal was to be able to allow organizations looking for volunteers to advertise opportunities directly to high school students.\n\n![massive-homepage.png](/blog-files/massive-volunteering/001-massive-homepage.webp)\n\n\n### Usage\n\n\nVolunteers can create an account and profile. Organizations can as well. There's a blog-style feed of opportunities that appears in the user's feed.\n\n\n### How it's made\n\n\nThe project is built using Python Flask and Bootstrap for the styling.\n\n\n### Challenges\n\n\nThis was the first real web project I ever built, so I had hard time building things without being reliant on tutorials.\n\n\n### Accomplishments\n\n\nThe app works pretty nicely, and it received a \\$500 grant from the Edmonton Community Foundation! I hope to deploy it Summer 2020.\n\n\n### Future\n\n\nI need to add the organization \"flow,\" and create better ways for users to be notified. An iOS and Android variant of this project would also be really cool! The GitHub issues are [viewable](https://github.com/michaelfromyeg/Massive-Volunteering/issues) here."
    },
    "csv-upload-tool": {
      "createdDate": "2024-12-27T23:53:00.000Z",
      "description": "Easily upload and match your CSV data with our intuitive tool, streamlining your data management process!",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-8039-a7f6-e9d09e908104",
      "publishedDate": "2020-04-29T18:58:00.000-06:00",
      "slug": "csv-upload-tool",
      "status": "Published",
      "tags": [
        "Project",
        "Technical",
        "Work"
      ],
      "title": "CSV Upload Tool",
      "coverImage": "/blog-files/csv-upload-tool/cover-upload.webp",
      "content": "Upload and match CSV data. Simple, but practical! Check out the project for yourself, [here](https://michaelfromyeg.github.io/CSV-Upload-Tool).\n\n\n### Background\n\n\nThis project was made for Artesian software, to be used in a more large scale project.\n\n\n### Usage\n\n\nA user can upload a CSV file with any data, and then can match their \"headers\" (the columns) to the one's anticipated by the app. With these pairings, the app then \"reassigns\" the user's data with the new headings and saves it to a SQLite database.\n\nCheck out some screenshots below!\n\n![succeed.png](/blog-files/csv-upload-tool/001-succeed.webp)\n\n![upload.png](/blog-files/csv-upload-tool/002-upload.webp)\n\n![failed.png](/blog-files/csv-upload-tool/003-failed.webp)\n\n\n### How it's made\n\n\nThe project was made using React, Flask, and SQLite. I used Bootstrap to style the components.\n\n\n### Challenges\n\n\nI struggled a decent amount to get SQLAlchemy to accept JSON data. Turns out they have a column type specifically for JSON. Consider this your friendly reminder to read the docs carefully!\n\n\n### Accomplishments\n\n\nI think the user experience is really smooth, and the app is visually quite appealing!\n\n\n### Future\n\n\nIt'd be great to implement drag and drop."
    },
    "arpro": {
      "createdDate": "2024-12-27T23:52:00.000Z",
      "description": "An innovative AR Android app that lets you visualize the latest Best Buy products in your home before making a purchase.",
      "editedDate": "2024-12-30T18:22:00.000Z",
      "id": "169c4188-fa0e-806d-b551-c51ab6782d6d",
      "publishedDate": "2020-01-30T18:58:00.000-07:00",
      "slug": "arpro",
      "status": "Published",
      "tags": [
        "Project",
        "Technical"
      ],
      "title": "ARPro",
      "coverImage": "/blog-files/arpro/cover-award.webp",
      "content": "![award.jpg](/blog-files/arpro/000-award.webp)\n\nAn AR Android application to let you view the latest Best Buy product in your home, from the comfort of your pyjamas.\n\n\n### Background\n\n\nThis project was developed by Michael DeMarco and Liang Liu, and backed by a business model developed by Benji Li, Daniel Frydman, and Ophir Greif. It was built at BizHacks 2020, a business-oriented hackathon sponsored by Best Buy and hosted at UBC. My team and I developed a business solution for Best Buy, and took home the 2nd place prize out of over 50 teams.\n\n\n### Usage\n\n\nThe project allowed users to determine what product dimensions were right for them from the comfort of their own home. Not sure if a 60\" or 62\" TV is right for you? Use our app to increment sizes of a mock TV displayed right on your wall, courtesy of the latest AR technology, or do a side-by-side comparison, or even enter a custom amount of inches!\n\nCheck it out below!\n\n![large-tv.jpg](/blog-files/arpro/001-large-tv.webp)\n\n![products.jpg](/blog-files/arpro/002-products.webp)\n\n![small-tv.jpg](/blog-files/arpro/003-small-tv.webp)\n\n\n### How it's made\n\n\nThis project was built using Java and ARCore.\n\n\n### Challenges\n\n\nGetting the AR to work properly was quite tricky; we ran into a number of issues finding suitable 3D models.\n\n\n### Accomplishments\n\n\nThe app works really nicely, and it took home 2nd place! It's an interesting, minimalist take on the idea of \"visualize furniture in your living room\" that Ikea made quite popular.\n\n\n### Future\n\n\nWe should probably clean up the UI."
    },
    "michaels-declassified-school-survival-guide": {
      "createdDate": "2024-12-27T06:43:00.000Z",
      "description": "High school can be overwhelming, but with effective scheduling, personalized learning strategies, and maintaining a balanced life, you can navigate it successfully.",
      "editedDate": "2024-12-27T07:15:00.000Z",
      "id": "169c4188-fa0e-80ad-a19b-e768057804ed",
      "publishedDate": "2019-08-10T23:45:00.000-06:00",
      "slug": "michaels-declassified-school-survival-guide",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "Michael's Declassified School Survival Guide",
      "coverImage": "/blog-files/michaels-declassified-school-survival-guide/cover-mcnally.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on August 10th, 2019.\n\n![My high school!](/blog-files/michaels-declassified-school-survival-guide/000-mcnally.webp)\n\nHigh school is complicated in more ways than one. From Degrassi-esque social drama to life-altering career decisions, it can be seriously difficult to maintain your grades. However, there are some simple tricks to ease the learning process and make your education systematic-that is, without all the overhead of figuring how to do this whole school thing. By following these three tips, you'll surely see a boost in your productivity and an ease in your hectic high school life.\n\nFirst, the schedule. Scheduling is no easy task! But nothing will hinder your high school experience more than not even being able to see what's in front of you. Scheduling has a myriad of benefits, from being able to see hectic exams days in advance, giving yourself free-time, and preventing yourself from double booking. One of the most common high school troubles is when teachers schedule numerous projects and exams for the same day. I like to call this \"the slog.\" The easiest way to get out of the slog is to jump out in front of it. You'll be surprised how receptive teachers are if you let them know early on that you won't be able to turn something in; however, teachers will not hesitate to dock you marks if you let them know the day of. All of this comes from scheduling. The easiest way to get started is to use an app like Google Calendar. This allows you to sync from your phone to your computer, and you can catch overlaps in your schedule as soon as they appear. Once you're comfortable with using Google Calendar, try to set a daily time to determine your schedule for the next day or week. This way, your studying time and project work periods can also be booked before they get away from you.\n\nSecond, the strategy. By high school, you likely have a good sense of what style of learner you are. But don't fret about the often exclaimed learner categories‚Äîbe it \"aural,\" \"visual,\" or \"kinesthetic\"‚Äîthese terms are often too narrow for most students. Instead, work class-by-class. In math, does it help more to do loads of practice or to do just the difficult questions? In English, do you need to spend more time planning, or are you better off working through your ideas as you write? Explicitly outlining these strategies, analogous to you being your own coach, can help you consciously approach your learning. Be flexible with this though! If a strategy is failing, just like a great coach, switch it up. As long as you're sure of yourself, your learning strategy is more likely to succeed.\n\nLast of all, the life. Though it may be tempting at times, when you're bracing for a scholarship and pushing for a spot at your favoured university, never let school trump your personal endeavors. Always maintain the activities you enjoy to ensure both your mental and physical health through the often tumultuous times. Eat three times a day, and try beginning your mornings with protein-heavy breakfasts. Sugar-rich cereals do little to boost your energy throughout the day, but a morning protein boost can give you that crucial edge.\n\nTrying to maintain these three things-the schedule, the strategy, and the life-is the crux of living your best life in high school. First and foremost, put your best foot forward, with these ambitions and motives in the back of your mind, and you'll be sure to thrive throughout high school."
    },
    "ikigai": {
      "createdDate": "2024-12-27T06:45:00.000Z",
      "description": "Discovering my path after high school through the Japanese concept of ikigai, which emphasizes the balance between passion, skills, needs, and financial viability.",
      "editedDate": "2024-12-27T07:15:00.000Z",
      "id": "169c4188-fa0e-8040-9d93-e4897991b171",
      "publishedDate": "2019-05-06T23:49:00.000-06:00",
      "slug": "ikigai",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "Ikigai",
      "coverImage": "/blog-files/ikigai/cover-photo-1636070515198-d7329524e6e3.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on May 6th, 2019.\n\nSome of my readers may know that I recently decided what I'll be doing past high school: studying computer science. This is very exciting as I now feel much more focused and fulfilled. I do find now that it is strange sitting in English classes and the like and trying to stay as motivated as I was. I now know that this subject won't be consequential to my life. However, I still enjoy all of my classes and have loved my school year so far.\n\nSomething I want to touch on in this piece is how I came to that decision. It's a very muggy thing, trying to decide what you're going to do after high school, and there's mounds of questionable advice out there. \"Follow your passion!\" is one quip I hear a lot. This is terrible advice. Your passion alone should not inform what you do, because it might not make sense with a few others things: what you're good at, what the world actually needs, and what you can make money for.\n\nI did a little research, and stumbled across the Japanese concept of ikigai. Of course, I won't explain it perfectly, so I encourage you to check this out on your own, but I'll try my best. Ikigai is a Japanese term for \"a reason for being,\" similar to ‚Äòraison d'etre' and other expressions. In the culture of Okinawa, ikigai is thought of as \"a reason to get up in the morning.\" Seems pretty cool right? So what does it actually look like? Well, I'll start with this venn diagram:\n\n![The Ikigai 4-way venn diagram.](/blog-files/ikigai/000-ikigai.webp)\n\nA four way venn diagram, so maybe not totally clear. Let's try to understanding what's going on. There are four categories, as mentioned. What you love, what you can be paid for, what the world needs, and what you're good at. Each of these intersect to fill different roles in our life: profession, vocation (a side hustle or a \"calling\"), mission, and passion. Now it's clear how passion alone is dangerous: it doesn't factor in money or the world at large. At the center of all of these concepts is harmony: ikigai. There are also cautions surrounding the venn diagram. Let's dissect them.\n\nWithout having what the world needs, we feel \"satisfaction, but a feeling of uselessness.\" In our lives, we need to contribute to something greater, and to feel a higher purpose (regardless of our spirituality). Across from that is where we lack any money behind our work; we have \"delight and fullness, but no wealth.\" Don't get too caught up in money though, there's a minimum you have to maintain to lead a satisfying life, and beyond that money begins to dictate your personality. What that baseline is varies from person-to-person, but try to determine what life you want to lead, and this can inform your salary goals. On the bottom right it reads, \"excitement and complacency, but sense of uncertainty.\" In this example, we haven't taken advantage of our skills. This would create a similar apathy and sadness, as we feel we could achieve something greater. Lastly, to the left from there, it reads: \"comfortable, but a feeling of emptiness.\" We need to have work that we love, otherwise, we dive deep into our work. Your life's achievements need to have a personal element to them to bring you joy!\n\nSo, there you have it: ikigai. A tangible way to think about what you want to do with your life. There are no wrong answers with ikigai, and if you ever feel you are missing something, you're never at a dead end. There are always chances to pick up a new hobby, work with a new organization, or challenge yourself somehow.\n\nOh, and how did I use ikigai to decide my major? I focussed on the intersection between what I was good at, and what I could be paid for. The world needs a lot of things, and there are lots of bright people working towards those things in their careers, so I didn't want that to necessarily inform my major. I'll put a pause on world domination for now. Moreover, I'm the type that loves virtually all of my work, so I didn't find that helpful in deciding. So, I had narrowed it down to what made money. Countless jobs have a salary I would be more than happy with. Some that stuck out included work in academia, STEM-centered jobs, potentially even law. Then I thought about what I was good at. I'm pretty flexible, but at more core I have a few main talents: math, problem-solving, and communicating. Well, a job that fuses that quite well is in computer science, where problems must be solved and presented to consumers!\n\nIf you have any questions about ikigai, you're always welcome to reach out at [~~me@michaeldemar.co~~](mailto:me@michaeldemar.co) michaelfromyeg [at] gmail [dot] com. I also encourage you to check out [this](https://forastateofhappiness.com/ikigai-the-happiness-of-always-being-busy-in-japan) article."
    },
    "10-newsletters-to-make-your-inbox-more-interesting": {
      "createdDate": "2024-12-27T07:07:00.000Z",
      "description": "Discover ten captivating newsletters that will transform your inbox into a source of knowledge and inspiration.",
      "editedDate": "2024-12-27T07:13:00.000Z",
      "id": "169c4188-fa0e-80d7-bb7c-d5e7ef53f546",
      "publishedDate": "2019-03-05T00:09:00.000-07:00",
      "slug": "10-newsletters-to-make-your-inbox-more-interesting",
      "status": "Published",
      "tags": [
        "Blog"
      ],
      "title": "10 newsletters to make your inbox more interesting",
      "coverImage": "/blog-files/10-newsletters-to-make-your-inbox-more-interesting/cover-newsletters.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on March 5th, 2019.\n\n![Newsletters!](/blog-files/10-newsletters-to-make-your-inbox-more-interesting/000-newsletters.webp)\n\nI have an addiction to e-mail newsletters. So I thought I'd put it to good use and share some of my favorites. Here are ten newsletters to brighten up your dreary inbox.\n\n[The Daily Pnut](https://dailypnut.com/)‚Ä¶ _The best newsletter, hands down_\n\nThe Daily Pnut describes itself as a newsletter about world affairs that will \"make you sound marginally more intelligent.\" It's my all-time favorite newsletter. With gripping and poignant articles about current events with a (refreshing) non-American lens, The Daily Pnut captures our rapidly changing world in an enjoyable, daily newsletter. It's a must-subscribe.\n\n[Morning Brew](https://morningbrew.com/)‚Ä¶ _Business news I can actually tolerate_\n\nBringing you the latest from \"Wall Street to Silicon Valley,\" the Morning Brew is a great financial newsletter for people less knowledgeable on the jargon, but still curious. It's consistently entertaining and lively. If you're interested in the financial world, the Morning Brew is a great way to stay in-the-know.\n\n[Vox Sentences](https://vox.com/vox-sentences)‚Ä¶ _The news, but shorter_\n\nConsuming one news source makes you biased, so why not consume them all? Vox Sentences combines snippets from a variety of organizations (though, you'd be hard-pressed to find a Fox quote), and places them together to create short pieces on current events. Always informative and covers pressing issues.\n\n[Farnam Street](https://fs.blog/)‚Ä¶ _Brain Food newsletter_\n\nFarnam Street's \"Brain Food\" newsletter covers a variety of mental models and ways of thinking about the world. For lack of a better term, it's damn cool.\n\n[BetterExplained](https://betterexplained.com/)‚Ä¶ _Math explained better_\n\nBetter Explained's monthly newsletter showcases articles from their blog which take difficult concepts from mathematics, economics, and other fields and creates intuitive ways of understanding them. Through analogies and no-brainer explanations, this blog makes even the most rigorous calculus concept comprehensible.\n\n[The Ann Friedman Weekly](https://annfriedman.com/)‚Ä¶ _Personal lens_\n\nIn this weekly newsletter Ann Friedman shares what she's been reading, and where she's at in life. It's uniquely personal lens makes this newsletter consistently interesting.\n\n[Noticing](https://kottke.org/newsletter)‚Ä¶ _Interesting nuggets from around the web_\n\nNoticing collects cool and quirky nuggets of information from around the web. It's the StumbleUpon of newsletters. I love it.\n\n[Wait But Why](https://waitbutwhy.com/)‚Ä¶ _Asking the real questions_\n\nA thought-provoking newsletter exploring the bigger questions, with stick figures. Because, how else would you figure out the meaning of life?\n\n[Brain Pickings](https://brainpickings.org/)‚Ä¶ _Scratch your noggin' with these reads_\n\nAgain, essentially just a mish mash of really cool stuff. This newsletter is particularly beautifully written as well. Its eloquence only makes it more enticing.\n\n[Exponential View](https://exponentialview.co/)‚Ä¶ _A nod to what's next_\n\nWith a specifically-futurist lens, Exponential View takes a glimpse into what the next few decades will hold. (However good or not they may be.)"
    },
    "all-about-hackathons": {
      "createdDate": "2024-12-27T06:30:00.000Z",
      "description": "Dive into my first hackathon experience at HackED 2019, where I learned, collaborated, and networked while coding a vintage Java application in just 24 hours!",
      "editedDate": "2024-12-28T00:06:00.000Z",
      "id": "169c4188-fa0e-80ba-b8f9-ee3d17f3a300",
      "publishedDate": "2017-07-01T23:35:00.000-06:00",
      "slug": "all-about-hackathons",
      "status": "Published",
      "tags": [
        "Blog",
        "Technical"
      ],
      "title": "All about hackathons",
      "coverImage": "/blog-files/all-about-hackathons/cover-hackathon.webp",
      "content": "> üìÖ Despite the edited date, this post was actually written and published on July 1st, 2017.\n\n![Hacking away at nwPlus 2019.](/blog-files/all-about-hackathons/000-hackathon.webp)\n\nLast weekend, I participated in my first ever hackathon. HackED 2019 is put on by the Computer Engineering Club at the University of Alberta, and follows a similar format to most hackathons. First, there was an opening ceremony to introduce various sponsors, prizes, and relevant information to the competition. Then, we were released into the wild for twenty-four straight hours to produce a piece of software that did a cool thing. And finally, after all was said and done, us bleary-eyed programmers faced the judges and showed off our product.\n\n_Michael from the future here! We created this very vintage Java application for tracking student grades. If you're bored, feel free to poke around the repository_ [_here_](https://github.com/michaelfromyeg/student-gradebook)_. It was my first interaction with Java, Swing, and OOP on a sizeable project._\n\nSo that's the gist: 24 hours, code something cool, try to win. Let's cut to the chase: why should you do it?\n\nFirst reason: to learn. Hackathons are a great place to get started with programming. This was a bit of a surprise to me‚Äîmany people at a hackathon go out of their way to learn a new technology with their project. At HackED 2019, my friends and I built something in Java, and we were all somewhat familiar. However, most decide to branch out and spend the twenty-four hours learning as much as they code. And it works. Because odds are, at a hacking conference with many, many hackers, someone else is probably already familiar with what you're struggling with. So one call-for-help and bam, the support is there. There is no better place to jump into a new programming language than a hackathon.\n\nSecond reason: to collaborate. Especially as a high school student, we don't often have to code together. We write projects, submit them to our instructor, rinse and repeat. When you work at a hackathon, you have to collaborate on code with your peers. For students of code who are new to this, using Git can having interesting results. Thankfully, at HackED there was a Git workshop so it wasn't a total bust. But having to do it first-hand with your friends is the best way to learn, plain and simple. And if you plan to work on any open source projects, it's a need-to-know skill.\n\nThird reason: to network. There are so many bright, eager minds at these events with people interested in everything from Raspberry Pi to Flask to R, etc. You can learn so much just by striking up a simple conversation. At HackED, I learned a ton about post-secondary options, job options for computer scientists in Edmonton, and more. Hackathons are a great way to meet other folks in the industry.\n\nAll in all, go to a hackathon! You won't regret it. Your programming skills will thank you later.\n\nAs a bonus, here are a couple screenshots of what we built at HackED 2019.\n\n![homepage.png](/blog-files/all-about-hackathons/002-homepage.webp)\n\n![4c5e05e6-a4d6-45c0-bb79-80be3184ced6.png](/blog-files/all-about-hackathons/003-4c5e05e6-a4d6-45c0-bb79-80be3184ced6.webp)\n\n![fc0071fa-fa08-45e6-9881-357275cf772f.png](/blog-files/all-about-hackathons/004-fc0071fa-fa08-45e6-9881-357275cf772f.webp)"
    }
  }
}